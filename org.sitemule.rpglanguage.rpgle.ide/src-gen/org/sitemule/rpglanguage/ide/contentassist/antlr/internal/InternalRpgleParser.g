/*
 * generated by Xtext 2.19.0
 */
parser grammar InternalRpgleParser;

options {
	tokenVocab=InternalRpgleLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.sitemule.rpglanguage.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.sitemule.rpglanguage.services.RpgleGrammarAccess;

}
@members {
	private RpgleGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("Do", "'do'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("ON", "'*ON'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Dec", "'dec'");
		tokenNameToValue.put("Dou", "'dou'");
		tokenNameToValue.put("Dow", "'dow'");
		tokenNameToValue.put("For", "'for'");
		tokenNameToValue.put("Int", "'int'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Eof", "'\%eof'");
		tokenNameToValue.put("Rnf", "'\%rnf'");
		tokenNameToValue.put("OFF", "'*OFF'");
		tokenNameToValue.put("INH1", "'INH1'");
		tokenNameToValue.put("Char", "'char'");
		tokenNameToValue.put("Date", "'date'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Exsr", "'exsr'");
		tokenNameToValue.put("Open", "'open'");
		tokenNameToValue.put("Read", "'read'");
		tokenNameToValue.put("When", "'when'");
		tokenNameToValue.put("INLR", "'*INLR'");
		tokenNameToValue.put("ZERO", "'*ZERO'");
		tokenNameToValue.put("Begsr", "'begsr'");
		tokenNameToValue.put("Chain", "'chain'");
		tokenNameToValue.put("Close", "'close'");
		tokenNameToValue.put("DclF", "'dcl-f'");
		tokenNameToValue.put("DclS", "'dcl-s'");
		tokenNameToValue.put("Enddo", "'enddo'");
		tokenNameToValue.put("Endif", "'endif'");
		tokenNameToValue.put("Endsl", "'endsl'");
		tokenNameToValue.put("Endsr", "'endsr'");
		tokenNameToValue.put("Other", "'other'");
		tokenNameToValue.put("Reade", "'reade'");
		tokenNameToValue.put("Setgt", "'setgt'");
		tokenNameToValue.put("Setll", "'setll'");
		tokenNameToValue.put("BLANK", "'*BLANK'");
		tokenNameToValue.put("HIVAL", "'*HIVAL'");
		tokenNameToValue.put("LOVAL", "'*LOVAL'");
		tokenNameToValue.put("ZEROS", "'*ZEROS'");
		tokenNameToValue.put("Elseif", "'elseif'");
		tokenNameToValue.put("Endfor", "'endfor'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("Select", "'select'");
		tokenNameToValue.put("BLANKS", "'*BLANKS'");
		tokenNameToValue.put("CtlOpt", "'ctl-opt'");
		tokenNameToValue.put("Options", "'options'");
		tokenNameToValue.put("Varchar", "'varchar'");
		tokenNameToValue.put("Include", "'/include'");
		tokenNameToValue.put("DclProc", "'dcl-proc'");
		tokenNameToValue.put("EndProc", "'end-proc;'");
		tokenNameToValue.put("Timestamp", "'timestamp'");
	}

	public void setGrammarAccess(RpgleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleLanguage
entryRuleLanguage
:
{ before(grammarAccess.getLanguageRule()); }
	 ruleLanguage
{ after(grammarAccess.getLanguageRule()); } 
	 EOF 
;

// Rule Language
ruleLanguage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLanguageAccess().getElementsAssignment()); }
		(rule__Language__ElementsAssignment)*
		{ after(grammarAccess.getLanguageAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponents
entryRuleComponents
:
{ before(grammarAccess.getComponentsRule()); }
	 ruleComponents
{ after(grammarAccess.getComponentsRule()); } 
	 EOF 
;

// Rule Components
ruleComponents 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentsAccess().getAlternatives()); }
		(rule__Components__Alternatives)
		{ after(grammarAccess.getComponentsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCtrlopt
entryRuleCtrlopt
:
{ before(grammarAccess.getCtrloptRule()); }
	 ruleCtrlopt
{ after(grammarAccess.getCtrloptRule()); } 
	 EOF 
;

// Rule Ctrlopt
ruleCtrlopt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCtrloptAccess().getGroup()); }
		(rule__Ctrlopt__Group__0)
		{ after(grammarAccess.getCtrloptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpt
entryRuleOpt
:
{ before(grammarAccess.getOptRule()); }
	 ruleOpt
{ after(grammarAccess.getOptRule()); } 
	 EOF 
;

// Rule Opt
ruleOpt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptAccess().getGroup()); }
		(rule__Opt__Group__0)
		{ after(grammarAccess.getOptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirective
entryRuleDirective
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectiveAccess().getGroup()); }
		(rule__Directive__Group__0)
		{ after(grammarAccess.getDirectiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclare
entryRuleDeclare
:
{ before(grammarAccess.getDeclareRule()); }
	 ruleDeclare
{ after(grammarAccess.getDeclareRule()); } 
	 EOF 
;

// Rule Declare
ruleDeclare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclareAccess().getAlternatives()); }
		(rule__Declare__Alternatives)
		{ after(grammarAccess.getDeclareAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDclf
entryRuleDclf
:
{ before(grammarAccess.getDclfRule()); }
	 ruleDclf
{ after(grammarAccess.getDclfRule()); } 
	 EOF 
;

// Rule Dclf
ruleDclf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDclfAccess().getGroup()); }
		(rule__Dclf__Group__0)
		{ after(grammarAccess.getDclfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFileio
entryRuleFileio
:
{ before(grammarAccess.getFileioRule()); }
	 ruleFileio
{ after(grammarAccess.getFileioRule()); } 
	 EOF 
;

// Rule Fileio
ruleFileio 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileioAccess().getAlternatives()); }
		(rule__Fileio__Alternatives)
		{ after(grammarAccess.getFileioAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpen
entryRuleOpen
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenAccess().getGroup()); }
		(rule__Open__Group__0)
		{ after(grammarAccess.getOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClose
entryRuleClose
:
{ before(grammarAccess.getCloseRule()); }
	 ruleClose
{ after(grammarAccess.getCloseRule()); } 
	 EOF 
;

// Rule Close
ruleClose 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCloseAccess().getGroup()); }
		(rule__Close__Group__0)
		{ after(grammarAccess.getCloseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChain
entryRuleChain
:
{ before(grammarAccess.getChainRule()); }
	 ruleChain
{ after(grammarAccess.getChainRule()); } 
	 EOF 
;

// Rule Chain
ruleChain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChainAccess().getGroup()); }
		(rule__Chain__Group__0)
		{ after(grammarAccess.getChainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRead
entryRuleRead
:
{ before(grammarAccess.getReadRule()); }
	 ruleRead
{ after(grammarAccess.getReadRule()); } 
	 EOF 
;

// Rule Read
ruleRead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadAccess().getGroup()); }
		(rule__Read__Group__0)
		{ after(grammarAccess.getReadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReade
entryRuleReade
:
{ before(grammarAccess.getReadeRule()); }
	 ruleReade
{ after(grammarAccess.getReadeRule()); } 
	 EOF 
;

// Rule Reade
ruleReade 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadeAccess().getGroup()); }
		(rule__Reade__Group__0)
		{ after(grammarAccess.getReadeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetll
entryRuleSetll
:
{ before(grammarAccess.getSetllRule()); }
	 ruleSetll
{ after(grammarAccess.getSetllRule()); } 
	 EOF 
;

// Rule Setll
ruleSetll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetllAccess().getGroup()); }
		(rule__Setll__Group__0)
		{ after(grammarAccess.getSetllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetgt
entryRuleSetgt
:
{ before(grammarAccess.getSetgtRule()); }
	 ruleSetgt
{ after(grammarAccess.getSetgtRule()); } 
	 EOF 
;

// Rule Setgt
ruleSetgt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetgtAccess().getGroup()); }
		(rule__Setgt__Group__0)
		{ after(grammarAccess.getSetgtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEof
entryRuleEof
:
{ before(grammarAccess.getEofRule()); }
	 ruleEof
{ after(grammarAccess.getEofRule()); } 
	 EOF 
;

// Rule Eof
ruleEof 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEofAccess().getGroup()); }
		(rule__Eof__Group__0)
		{ after(grammarAccess.getEofAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRnf
entryRuleRnf
:
{ before(grammarAccess.getRnfRule()); }
	 ruleRnf
{ after(grammarAccess.getRnfRule()); } 
	 EOF 
;

// Rule Rnf
ruleRnf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRnfAccess().getGroup()); }
		(rule__Rnf__Group__0)
		{ after(grammarAccess.getRnfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDclproc
entryRuleDclproc
:
{ before(grammarAccess.getDclprocRule()); }
	 ruleDclproc
{ after(grammarAccess.getDclprocRule()); } 
	 EOF 
;

// Rule Dclproc
ruleDclproc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDclprocAccess().getGroup()); }
		(rule__Dclproc__Group__0)
		{ after(grammarAccess.getDclprocAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCode
entryRuleCode
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCodeAccess().getGroup()); }
		(rule__Code__Group__0)
		{ after(grammarAccess.getCodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubrutine
entryRuleSubrutine
:
{ before(grammarAccess.getSubrutineRule()); }
	 ruleSubrutine
{ after(grammarAccess.getSubrutineRule()); } 
	 EOF 
;

// Rule Subrutine
ruleSubrutine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubrutineAccess().getGroup()); }
		(rule__Subrutine__Group__0)
		{ after(grammarAccess.getSubrutineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExsr
entryRuleExsr
:
{ before(grammarAccess.getExsrRule()); }
	 ruleExsr
{ after(grammarAccess.getExsrRule()); } 
	 EOF 
;

// Rule Exsr
ruleExsr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExsrAccess().getGroup()); }
		(rule__Exsr__Group__0)
		{ after(grammarAccess.getExsrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStmt
entryRuleStmt
:
{ before(grammarAccess.getStmtRule()); }
	 ruleStmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule Stmt
ruleStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStmtAccess().getAlternatives()); }
		(rule__Stmt__Alternatives)
		{ after(grammarAccess.getStmtAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBif
entryRuleBif
:
{ before(grammarAccess.getBifRule()); }
	 ruleBif
{ after(grammarAccess.getBifRule()); } 
	 EOF 
;

// Rule Bif
ruleBif 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBifAccess().getAlternatives()); }
		(rule__Bif__Alternatives)
		{ after(grammarAccess.getBifAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParmlist
entryRuleParmlist
:
{ before(grammarAccess.getParmlistRule()); }
	 ruleParmlist
{ after(grammarAccess.getParmlistRule()); } 
	 EOF 
;

// Rule Parmlist
ruleParmlist 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParmlistAccess().getGroup()); }
		(rule__Parmlist__Group__0)
		{ after(grammarAccess.getParmlistAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParm1
entryRuleParm1
:
{ before(grammarAccess.getParm1Rule()); }
	 ruleParm1
{ after(grammarAccess.getParm1Rule()); } 
	 EOF 
;

// Rule Parm1
ruleParm1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParm1Access().getParmAssignment()); }
		(rule__Parm1__ParmAssignment)
		{ after(grammarAccess.getParm1Access().getParmAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParm2
entryRuleParm2
:
{ before(grammarAccess.getParm2Rule()); }
	 ruleParm2
{ after(grammarAccess.getParm2Rule()); } 
	 EOF 
;

// Rule Parm2
ruleParm2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParm2Access().getGroup()); }
		(rule__Parm2__Group__0)
		{ after(grammarAccess.getParm2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfblock
entryRuleIfblock
:
{ before(grammarAccess.getIfblockRule()); }
	 ruleIfblock
{ after(grammarAccess.getIfblockRule()); } 
	 EOF 
;

// Rule Ifblock
ruleIfblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfblockAccess().getGroup()); }
		(rule__Ifblock__Group__0)
		{ after(grammarAccess.getIfblockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseif
entryRuleElseif
:
{ before(grammarAccess.getElseifRule()); }
	 ruleElseif
{ after(grammarAccess.getElseifRule()); } 
	 EOF 
;

// Rule Elseif
ruleElseif 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseifAccess().getGroup()); }
		(rule__Elseif__Group__0)
		{ after(grammarAccess.getElseifAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElse
entryRuleElse
:
{ before(grammarAccess.getElseRule()); }
	 ruleElse
{ after(grammarAccess.getElseRule()); } 
	 EOF 
;

// Rule Else
ruleElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseAccess().getGroup()); }
		(rule__Else__Group__0)
		{ after(grammarAccess.getElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndif
entryRuleEndif
:
{ before(grammarAccess.getEndifRule()); }
	 ruleEndif
{ after(grammarAccess.getEndifRule()); } 
	 EOF 
;

// Rule Endif
ruleEndif 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndifAccess().getEndifKeyword()); }
		Endif
		{ after(grammarAccess.getEndifAccess().getEndifKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDo
entryRuleDo
:
{ before(grammarAccess.getDoRule()); }
	 ruleDo
{ after(grammarAccess.getDoRule()); } 
	 EOF 
;

// Rule Do
ruleDo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoAccess().getGroup()); }
		(rule__Do__Group__0)
		{ after(grammarAccess.getDoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDow
entryRuleDow
:
{ before(grammarAccess.getDowRule()); }
	 ruleDow
{ after(grammarAccess.getDowRule()); } 
	 EOF 
;

// Rule Dow
ruleDow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDowAccess().getGroup()); }
		(rule__Dow__Group__0)
		{ after(grammarAccess.getDowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDou
entryRuleDou
:
{ before(grammarAccess.getDouRule()); }
	 ruleDou
{ after(grammarAccess.getDouRule()); } 
	 EOF 
;

// Rule Dou
ruleDou 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDouAccess().getGroup()); }
		(rule__Dou__Group__0)
		{ after(grammarAccess.getDouAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectblock
entryRuleSelectblock
:
{ before(grammarAccess.getSelectblockRule()); }
	 ruleSelectblock
{ after(grammarAccess.getSelectblockRule()); } 
	 EOF 
;

// Rule Selectblock
ruleSelectblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectblockAccess().getGroup()); }
		(rule__Selectblock__Group__0)
		{ after(grammarAccess.getSelectblockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOther
entryRuleOther
:
{ before(grammarAccess.getOtherRule()); }
	 ruleOther
{ after(grammarAccess.getOtherRule()); } 
	 EOF 
;

// Rule Other
ruleOther 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOtherAccess().getGroup()); }
		(rule__Other__Group__0)
		{ after(grammarAccess.getOtherAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndsl
entryRuleEndsl
:
{ before(grammarAccess.getEndslRule()); }
	 ruleEndsl
{ after(grammarAccess.getEndslRule()); } 
	 EOF 
;

// Rule Endsl
ruleEndsl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndslAccess().getEndslKeyword()); }
		Endsl
		{ after(grammarAccess.getEndslAccess().getEndslKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturn
entryRuleReturn
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnAccess().getGroup()); }
		(rule__Return__Group__0)
		{ after(grammarAccess.getReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getGroup()); }
		(rule__Boolean__Group__0)
		{ after(grammarAccess.getBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolExpr
entryRuleBoolExpr
:
{ before(grammarAccess.getBoolExprRule()); }
	 ruleBoolExpr
{ after(grammarAccess.getBoolExprRule()); } 
	 EOF 
;

// Rule BoolExpr
ruleBoolExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolExprAccess().getGroup()); }
		(rule__BoolExpr__Group__0)
		{ after(grammarAccess.getBoolExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpr
entryRuleOrExpr
:
{ before(grammarAccess.getOrExprRule()); }
	 ruleOrExpr
{ after(grammarAccess.getOrExprRule()); } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExprAccess().getGroup()); }
		(rule__OrExpr__Group__0)
		{ after(grammarAccess.getOrExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpr
entryRuleAndExpr
:
{ before(grammarAccess.getAndExprRule()); }
	 ruleAndExpr
{ after(grammarAccess.getAndExprRule()); } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExprAccess().getGroup()); }
		(rule__AndExpr__Group__0)
		{ after(grammarAccess.getAndExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
		(rule__PrimaryExpr__Alternatives)
		{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompare
entryRuleCompare
:
{ before(grammarAccess.getCompareRule()); }
	 ruleCompare
{ after(grammarAccess.getCompareRule()); } 
	 EOF 
;

// Rule Compare
ruleCompare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareAccess().getGroup()); }
		(rule__Compare__Group__0)
		{ after(grammarAccess.getCompareAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompare2
entryRuleCompare2
:
{ before(grammarAccess.getCompare2Rule()); }
	 ruleCompare2
{ after(grammarAccess.getCompare2Rule()); } 
	 EOF 
;

// Rule Compare2
ruleCompare2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompare2Access().getGroup()); }
		(rule__Compare2__Group__0)
		{ after(grammarAccess.getCompare2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareRight
entryRuleCompareRight
:
{ before(grammarAccess.getCompareRightRule()); }
	 ruleCompareRight
{ after(grammarAccess.getCompareRightRule()); } 
	 EOF 
;

// Rule CompareRight
ruleCompareRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareRightAccess().getGroup()); }
		(rule__CompareRight__Group__0)
		{ after(grammarAccess.getCompareRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecial
entryRuleSpecial
:
{ before(grammarAccess.getSpecialRule()); }
	 ruleSpecial
{ after(grammarAccess.getSpecialRule()); } 
	 EOF 
;

// Rule Special
ruleSpecial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecialAccess().getAlternatives()); }
		(rule__Special__Alternatives)
		{ after(grammarAccess.getSpecialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDcls
entryRuleDcls
:
{ before(grammarAccess.getDclsRule()); }
	 ruleDcls
{ after(grammarAccess.getDclsRule()); } 
	 EOF 
;

// Rule Dcls
ruleDcls 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDclsAccess().getGroup()); }
		(rule__Dcls__Group__0)
		{ after(grammarAccess.getDclsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatype
entryRuleDatatype
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup()); }
		(rule__Datatype__Group__0)
		{ after(grammarAccess.getDatatypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLen
entryRuleLen
:
{ before(grammarAccess.getLenRule()); }
	 ruleLen
{ after(grammarAccess.getLenRule()); } 
	 EOF 
;

// Rule Len
ruleLen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLenAccess().getGroup()); }
		(rule__Len__Group__0)
		{ after(grammarAccess.getLenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptions
entryRuleOptions
:
{ before(grammarAccess.getOptionsRule()); }
	 ruleOptions
{ after(grammarAccess.getOptionsRule()); } 
	 EOF 
;

// Rule Options
ruleOptions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionsAccess().getGroup()); }
		(rule__Options__Group__0)
		{ after(grammarAccess.getOptionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Components__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentsAccess().getCtrloptParserRuleCall_0()); }
		ruleCtrlopt
		{ after(grammarAccess.getComponentsAccess().getCtrloptParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComponentsAccess().getDirectiveParserRuleCall_1()); }
		ruleDirective
		{ after(grammarAccess.getComponentsAccess().getDirectiveParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComponentsAccess().getDeclareParserRuleCall_2()); }
		ruleDeclare
		{ after(grammarAccess.getComponentsAccess().getDeclareParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declare__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclareAccess().getDclprocParserRuleCall_0()); }
		ruleDclproc
		{ after(grammarAccess.getDeclareAccess().getDclprocParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclareAccess().getDclsParserRuleCall_1()); }
		ruleDcls
		{ after(grammarAccess.getDeclareAccess().getDclsParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDeclareAccess().getDclfParserRuleCall_2()); }
		ruleDclf
		{ after(grammarAccess.getDeclareAccess().getDclfParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fileio__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileioAccess().getOpenParserRuleCall_0()); }
		ruleOpen
		{ after(grammarAccess.getFileioAccess().getOpenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getCloseParserRuleCall_1()); }
		ruleClose
		{ after(grammarAccess.getFileioAccess().getCloseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getChainParserRuleCall_2()); }
		ruleChain
		{ after(grammarAccess.getFileioAccess().getChainParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getReadParserRuleCall_3()); }
		ruleRead
		{ after(grammarAccess.getFileioAccess().getReadParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getReadeParserRuleCall_4()); }
		ruleReade
		{ after(grammarAccess.getFileioAccess().getReadeParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getSetllParserRuleCall_5()); }
		ruleSetll
		{ after(grammarAccess.getFileioAccess().getSetllParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getSetgtParserRuleCall_6()); }
		ruleSetgt
		{ after(grammarAccess.getFileioAccess().getSetgtParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getEofParserRuleCall_7()); }
		ruleEof
		{ after(grammarAccess.getFileioAccess().getEofParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getFileioAccess().getRnfParserRuleCall_8()); }
		ruleRnf
		{ after(grammarAccess.getFileioAccess().getRnfParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodeAccess().getStmtParserRuleCall_0_0()); }
		ruleStmt
		{ after(grammarAccess.getCodeAccess().getStmtParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCodeAccess().getSubrutineParserRuleCall_0_1()); }
		ruleSubrutine
		{ after(grammarAccess.getCodeAccess().getSubrutineParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_0()); }
		ruleAssignment
		{ after(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getIfblockParserRuleCall_1()); }
		ruleIfblock
		{ after(grammarAccess.getStmtAccess().getIfblockParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getDoParserRuleCall_2()); }
		ruleDo
		{ after(grammarAccess.getStmtAccess().getDoParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getDowParserRuleCall_3()); }
		ruleDow
		{ after(grammarAccess.getStmtAccess().getDowParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getDouParserRuleCall_4()); }
		ruleDou
		{ after(grammarAccess.getStmtAccess().getDouParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getForParserRuleCall_5()); }
		ruleFor
		{ after(grammarAccess.getStmtAccess().getForParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getSelectblockParserRuleCall_6()); }
		ruleSelectblock
		{ after(grammarAccess.getStmtAccess().getSelectblockParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getExsrParserRuleCall_7()); }
		ruleExsr
		{ after(grammarAccess.getStmtAccess().getExsrParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getFileioParserRuleCall_8()); }
		ruleFileio
		{ after(grammarAccess.getStmtAccess().getFileioParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStmtAccess().getReturnParserRuleCall_9()); }
		ruleReturn
		{ after(grammarAccess.getStmtAccess().getReturnParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getIntvalAssignment_0()); }
		(rule__Expression__IntvalAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getIntvalAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getStrvalAssignment_1()); }
		(rule__Expression__StrvalAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getStrvalAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getVarAssignment_2()); }
		(rule__Expression__VarAssignment_2)
		{ after(grammarAccess.getExpressionAccess().getVarAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBifParserRuleCall_3()); }
		ruleBif
		{ after(grammarAccess.getExpressionAccess().getBifParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_4()); }
		(rule__Expression__Group_4__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bif__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBifAccess().getEofParserRuleCall_0()); }
		ruleEof
		{ after(grammarAccess.getBifAccess().getEofParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBifAccess().getRnfParserRuleCall_1()); }
		ruleRnf
		{ after(grammarAccess.getBifAccess().getRnfParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getGroup_0()); }
		(rule__PrimaryExpr__Group_0__0)
		{ after(grammarAccess.getPrimaryExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getCompareParserRuleCall_1()); }
		ruleCompare
		{ after(grammarAccess.getPrimaryExprAccess().getCompareParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getSpecAssignment_0_0()); }
		(rule__Compare__SpecAssignment_0_0)
		{ after(grammarAccess.getCompareAccess().getSpecAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareAccess().getIntval2Assignment_0_1()); }
		(rule__Compare__Intval2Assignment_0_1)
		{ after(grammarAccess.getCompareAccess().getIntval2Assignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareAccess().getStrval2Assignment_0_2()); }
		(rule__Compare__Strval2Assignment_0_2)
		{ after(grammarAccess.getCompareAccess().getStrval2Assignment_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareAccess().getVar2Assignment_0_3()); }
		(rule__Compare__Var2Assignment_0_3)
		{ after(grammarAccess.getCompareAccess().getVar2Assignment_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompareAccess().getBif2Assignment_0_4()); }
		(rule__Compare__Bif2Assignment_0_4)
		{ after(grammarAccess.getCompareAccess().getBif2Assignment_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare2__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompare2Access().getGreaterThanSignKeyword_0_0()); }
		GreaterThanSign
		{ after(grammarAccess.getCompare2Access().getGreaterThanSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompare2Access().getLessThanSignKeyword_0_1()); }
		LessThanSign
		{ after(grammarAccess.getCompare2Access().getLessThanSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompare2Access().getEqualsSignKeyword_0_2()); }
		EqualsSign
		{ after(grammarAccess.getCompare2Access().getEqualsSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompare2Access().getGreaterThanSignEqualsSignKeyword_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getCompare2Access().getGreaterThanSignEqualsSignKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompare2Access().getLessThanSignEqualsSignKeyword_0_4()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getCompare2Access().getLessThanSignEqualsSignKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getSpecAssignment_0_0()); }
		(rule__CompareRight__SpecAssignment_0_0)
		{ after(grammarAccess.getCompareRightAccess().getSpecAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareRightAccess().getIntval2Assignment_0_1()); }
		(rule__CompareRight__Intval2Assignment_0_1)
		{ after(grammarAccess.getCompareRightAccess().getIntval2Assignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareRightAccess().getStrval2Assignment_0_2()); }
		(rule__CompareRight__Strval2Assignment_0_2)
		{ after(grammarAccess.getCompareRightAccess().getStrval2Assignment_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareRightAccess().getVar2Assignment_0_3()); }
		(rule__CompareRight__Var2Assignment_0_3)
		{ after(grammarAccess.getCompareRightAccess().getVar2Assignment_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompareRightAccess().getBif2Assignment_0_4()); }
		(rule__CompareRight__Bif2Assignment_0_4)
		{ after(grammarAccess.getCompareRightAccess().getBif2Assignment_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Special__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecialAccess().getINDTerminalRuleCall_0()); }
		RULE_IND
		{ after(grammarAccess.getSpecialAccess().getINDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getINLRKeyword_1()); }
		INLR
		{ after(grammarAccess.getSpecialAccess().getINLRKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getINH1Keyword_2()); }
		INH1
		{ after(grammarAccess.getSpecialAccess().getINH1Keyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getONKeyword_3()); }
		ON
		{ after(grammarAccess.getSpecialAccess().getONKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getOFFKeyword_4()); }
		OFF
		{ after(grammarAccess.getSpecialAccess().getOFFKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getZEROSKeyword_5()); }
		ZEROS
		{ after(grammarAccess.getSpecialAccess().getZEROSKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getZEROKeyword_6()); }
		ZERO
		{ after(grammarAccess.getSpecialAccess().getZEROKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getBLANKKeyword_7()); }
		BLANK
		{ after(grammarAccess.getSpecialAccess().getBLANKKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getBLANKSKeyword_8()); }
		BLANKS
		{ after(grammarAccess.getSpecialAccess().getBLANKSKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getHIVALKeyword_9()); }
		HIVAL
		{ after(grammarAccess.getSpecialAccess().getHIVALKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getSpecialAccess().getLOVALKeyword_10()); }
		LOVAL
		{ after(grammarAccess.getSpecialAccess().getLOVALKeyword_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getCharKeyword_0_0()); }
		Char
		{ after(grammarAccess.getDatatypeAccess().getCharKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getVarcharKeyword_0_1()); }
		Varchar
		{ after(grammarAccess.getDatatypeAccess().getVarcharKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getIntKeyword_0_2()); }
		Int
		{ after(grammarAccess.getDatatypeAccess().getIntKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getDecKeyword_0_3()); }
		Dec
		{ after(grammarAccess.getDatatypeAccess().getDecKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getDateKeyword_0_4()); }
		Date
		{ after(grammarAccess.getDatatypeAccess().getDateKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getTimestampKeyword_0_5()); }
		Timestamp
		{ after(grammarAccess.getDatatypeAccess().getTimestampKeyword_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ctrlopt__Group__0__Impl
	rule__Ctrlopt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtrloptAccess().getCtlOptKeyword_0()); }
	CtlOpt
	{ after(grammarAccess.getCtrloptAccess().getCtlOptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ctrlopt__Group__1__Impl
	rule__Ctrlopt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCtrloptAccess().getOptAssignment_1()); }
		(rule__Ctrlopt__OptAssignment_1)
		{ after(grammarAccess.getCtrloptAccess().getOptAssignment_1()); }
	)
	(
		{ before(grammarAccess.getCtrloptAccess().getOptAssignment_1()); }
		(rule__Ctrlopt__OptAssignment_1)*
		{ after(grammarAccess.getCtrloptAccess().getOptAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ctrlopt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCtrloptAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getCtrloptAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Opt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Opt__Group__0__Impl
	rule__Opt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptAccess().getNameAssignment_0()); }
	(rule__Opt__NameAssignment_0)
	{ after(grammarAccess.getOptAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Opt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptAccess().getGroup_1()); }
	(rule__Opt__Group_1__0)?
	{ after(grammarAccess.getOptAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Opt__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Opt__Group_1__0__Impl
	rule__Opt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getOptAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Opt__Group_1__1__Impl
	rule__Opt__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptAccess().getValueAssignment_1_1()); }
	(rule__Opt__ValueAssignment_1_1)
	{ after(grammarAccess.getOptAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Opt__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getOptAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Directive__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__0__Impl
	rule__Directive__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getIncludeKeyword_0()); }
	Include
	{ after(grammarAccess.getDirectiveAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__1__Impl
	rule__Directive__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getNameAssignment_1()); }
	(rule__Directive__NameAssignment_1)
	{ after(grammarAccess.getDirectiveAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directive__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectiveAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getDirectiveAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dclf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclf__Group__0__Impl
	rule__Dclf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclfAccess().getDclFKeyword_0()); }
	DclF
	{ after(grammarAccess.getDclfAccess().getDclFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclf__Group__1__Impl
	rule__Dclf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclfAccess().getNameAssignment_1()); }
	(rule__Dclf__NameAssignment_1)
	{ after(grammarAccess.getDclfAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclf__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclfAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getDclfAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
	Open
	{ after(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getNameAssignment_1()); }
	(rule__Open__NameAssignment_1)
	{ after(grammarAccess.getOpenAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Close__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__0__Impl
	rule__Close__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getCloseKeyword_0()); }
	Close
	{ after(grammarAccess.getCloseAccess().getCloseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getNameAssignment_1()); }
	(rule__Close__NameAssignment_1)
	{ after(grammarAccess.getCloseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Chain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chain__Group__0__Impl
	rule__Chain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChainAccess().getChainKeyword_0()); }
	Chain
	{ after(grammarAccess.getChainAccess().getChainKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChainAccess().getNameAssignment_1()); }
	(rule__Chain__NameAssignment_1)
	{ after(grammarAccess.getChainAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__0__Impl
	rule__Read__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getReadKeyword_0()); }
	Read
	{ after(grammarAccess.getReadAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getNameAssignment_1()); }
	(rule__Read__NameAssignment_1)
	{ after(grammarAccess.getReadAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reade__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reade__Group__0__Impl
	rule__Reade__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reade__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadeAccess().getReadeKeyword_0()); }
	Reade
	{ after(grammarAccess.getReadeAccess().getReadeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reade__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reade__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reade__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadeAccess().getNameAssignment_1()); }
	(rule__Reade__NameAssignment_1)
	{ after(grammarAccess.getReadeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Setll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setll__Group__0__Impl
	rule__Setll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Setll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetllAccess().getSetllKeyword_0()); }
	Setll
	{ after(grammarAccess.getSetllAccess().getSetllKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setll__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Setll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetllAccess().getNameAssignment_1()); }
	(rule__Setll__NameAssignment_1)
	{ after(grammarAccess.getSetllAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Setgt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setgt__Group__0__Impl
	rule__Setgt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Setgt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetgtAccess().getSetgtKeyword_0()); }
	Setgt
	{ after(grammarAccess.getSetgtAccess().getSetgtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setgt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setgt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Setgt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetgtAccess().getNameAssignment_1()); }
	(rule__Setgt__NameAssignment_1)
	{ after(grammarAccess.getSetgtAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Eof__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eof__Group__0__Impl
	rule__Eof__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEofAccess().getEofKeyword_0()); }
	Eof
	{ after(grammarAccess.getEofAccess().getEofKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eof__Group__1__Impl
	rule__Eof__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEofAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getEofAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eof__Group__2__Impl
	rule__Eof__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEofAccess().getNameAssignment_2()); }
	(rule__Eof__NameAssignment_2)
	{ after(grammarAccess.getEofAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eof__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEofAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getEofAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rnf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rnf__Group__0__Impl
	rule__Rnf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRnfAccess().getRnfKeyword_0()); }
	Rnf
	{ after(grammarAccess.getRnfAccess().getRnfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rnf__Group__1__Impl
	rule__Rnf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRnfAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getRnfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rnf__Group__2__Impl
	rule__Rnf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRnfAccess().getNameAssignment_2()); }
	(rule__Rnf__NameAssignment_2)
	{ after(grammarAccess.getRnfAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rnf__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRnfAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getRnfAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dclproc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__0__Impl
	rule__Dclproc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getDclProcKeyword_0()); }
	DclProc
	{ after(grammarAccess.getDclprocAccess().getDclProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__1__Impl
	rule__Dclproc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getNameAssignment_1()); }
	(rule__Dclproc__NameAssignment_1)
	{ after(grammarAccess.getDclprocAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__2__Impl
	rule__Dclproc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getDclprocAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__3__Impl
	rule__Dclproc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getDeclareAssignment_3()); }
	(rule__Dclproc__DeclareAssignment_3)*
	{ after(grammarAccess.getDclprocAccess().getDeclareAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__4__Impl
	rule__Dclproc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getCodeAssignment_4()); }
	(rule__Dclproc__CodeAssignment_4)*
	{ after(grammarAccess.getDclprocAccess().getCodeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dclproc__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclprocAccess().getEndProcKeyword_5()); }
	EndProc
	{ after(grammarAccess.getDclprocAccess().getEndProcKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodeAccess().getAlternatives_0()); }
	(rule__Code__Alternatives_0)
	{ after(grammarAccess.getCodeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Code__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodeAccess().getSemicolonKeyword_1()); }
	Semicolon
	{ after(grammarAccess.getCodeAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subrutine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subrutine__Group__0__Impl
	rule__Subrutine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrutineAccess().getBegsrKeyword_0()); }
	Begsr
	{ after(grammarAccess.getSubrutineAccess().getBegsrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subrutine__Group__1__Impl
	rule__Subrutine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrutineAccess().getNameAssignment_1()); }
	(rule__Subrutine__NameAssignment_1)
	{ after(grammarAccess.getSubrutineAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subrutine__Group__2__Impl
	rule__Subrutine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrutineAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getSubrutineAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subrutine__Group__3__Impl
	rule__Subrutine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrutineAccess().getSubrcodeAssignment_3()); }
	(rule__Subrutine__SubrcodeAssignment_3)*
	{ after(grammarAccess.getSubrutineAccess().getSubrcodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subrutine__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrutineAccess().getEndsrKeyword_4()); }
	Endsr
	{ after(grammarAccess.getSubrutineAccess().getEndsrKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exsr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exsr__Group__0__Impl
	rule__Exsr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exsr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExsrAccess().getExsrKeyword_0()); }
	Exsr
	{ after(grammarAccess.getExsrAccess().getExsrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exsr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exsr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exsr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExsrAccess().getNameAssignment_1()); }
	(rule__Exsr__NameAssignment_1)
	{ after(grammarAccess.getExsrAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
	(rule__Assignment__VariableAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
	(rule__Assignment__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__0__Impl
	rule__Expression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getProcvalAssignment_4_0()); }
	(rule__Expression__ProcvalAssignment_4_0)
	{ after(grammarAccess.getExpressionAccess().getProcvalAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__1__Impl
	rule__Expression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_4_1()); }
	LeftParenthesis
	{ after(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__2__Impl
	rule__Expression__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getParmlistAssignment_4_2()); }
	(rule__Expression__ParmlistAssignment_4_2)?
	{ after(grammarAccess.getExpressionAccess().getParmlistAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_4_3()); }
	RightParenthesis
	{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parmlist__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parmlist__Group__0__Impl
	rule__Parmlist__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parmlist__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParmlistAccess().getParm1ParserRuleCall_0()); }
	ruleParm1
	{ after(grammarAccess.getParmlistAccess().getParm1ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parmlist__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parmlist__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parmlist__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParmlistAccess().getParmsAssignment_1()); }
	(rule__Parmlist__ParmsAssignment_1)*
	{ after(grammarAccess.getParmlistAccess().getParmsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parm2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parm2__Group__0__Impl
	rule__Parm2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parm2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParm2Access().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getParm2Access().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parm2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parm2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parm2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParm2Access().getParm1ParserRuleCall_1()); }
	ruleParm1
	{ after(grammarAccess.getParm2Access().getParm1ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ifblock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ifblock__Group__0__Impl
	rule__Ifblock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfblockAccess().getIfParserRuleCall_0()); }
	ruleIf
	{ after(grammarAccess.getIfblockAccess().getIfParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ifblock__Group__1__Impl
	rule__Ifblock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfblockAccess().getIfcodeAssignment_1()); }
	(rule__Ifblock__IfcodeAssignment_1)*
	{ after(grammarAccess.getIfblockAccess().getIfcodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ifblock__Group__2__Impl
	rule__Ifblock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfblockAccess().getIfcodeAssignment_2()); }
	(rule__Ifblock__IfcodeAssignment_2)?
	{ after(grammarAccess.getIfblockAccess().getIfcodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ifblock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfblockAccess().getEndifParserRuleCall_3()); }
	ruleEndif
	{ after(grammarAccess.getIfblockAccess().getEndifParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	If
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getBooleanParserRuleCall_1()); }
	ruleBoolean
	{ after(grammarAccess.getIfAccess().getBooleanParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getIfAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfcodeAssignment_3()); }
	(rule__If__IfcodeAssignment_3)*
	{ after(grammarAccess.getIfAccess().getIfcodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Elseif__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Elseif__Group__0__Impl
	rule__Elseif__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseifAccess().getElseifKeyword_0()); }
	Elseif
	{ after(grammarAccess.getElseifAccess().getElseifKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Elseif__Group__1__Impl
	rule__Elseif__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseifAccess().getBooleanParserRuleCall_1()); }
	ruleBoolean
	{ after(grammarAccess.getElseifAccess().getBooleanParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Elseif__Group__2__Impl
	rule__Elseif__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseifAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getElseifAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Elseif__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseifAccess().getIfcodeAssignment_3()); }
	(rule__Elseif__IfcodeAssignment_3)*
	{ after(grammarAccess.getElseifAccess().getIfcodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Else__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__0__Impl
	rule__Else__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getElseAction_0()); }
	()
	{ after(grammarAccess.getElseAccess().getElseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__1__Impl
	rule__Else__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getElseKeyword_1()); }
	Else
	{ after(grammarAccess.getElseAccess().getElseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__2__Impl
	rule__Else__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getElseAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getIfcodeAssignment_3()); }
	(rule__Else__IfcodeAssignment_3)*
	{ after(grammarAccess.getElseAccess().getIfcodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Do__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Do__Group__0__Impl
	rule__Do__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAccess().getDoKeyword_0()); }
	Do
	{ after(grammarAccess.getDoAccess().getDoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Do__Group__1__Impl
	rule__Do__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAccess().getSemicolonKeyword_1()); }
	Semicolon
	{ after(grammarAccess.getDoAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Do__Group__2__Impl
	rule__Do__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAccess().getCodeAssignment_2()); }
	(rule__Do__CodeAssignment_2)*
	{ after(grammarAccess.getDoAccess().getCodeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Do__Group__3__Impl
	rule__Do__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAccess().getEnddoKeyword_3()); }
	Enddo
	{ after(grammarAccess.getDoAccess().getEnddoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Do__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoAccess().getSemicolonKeyword_4()); }
	Semicolon
	{ after(grammarAccess.getDoAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__0__Impl
	rule__Dow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getDowKeyword_0()); }
	Dow
	{ after(grammarAccess.getDowAccess().getDowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__1__Impl
	rule__Dow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getDowAssignment_1()); }
	(rule__Dow__DowAssignment_1)
	{ after(grammarAccess.getDowAccess().getDowAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__2__Impl
	rule__Dow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getDowAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__3__Impl
	rule__Dow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getCodeAssignment_3()); }
	(rule__Dow__CodeAssignment_3)*
	{ after(grammarAccess.getDowAccess().getCodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__4__Impl
	rule__Dow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getEnddoKeyword_4()); }
	Enddo
	{ after(grammarAccess.getDowAccess().getEnddoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dow__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDowAccess().getSemicolonKeyword_5()); }
	Semicolon
	{ after(grammarAccess.getDowAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dou__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__0__Impl
	rule__Dou__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getDouKeyword_0()); }
	Dou
	{ after(grammarAccess.getDouAccess().getDouKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__1__Impl
	rule__Dou__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getDouAssignment_1()); }
	(rule__Dou__DouAssignment_1)
	{ after(grammarAccess.getDouAccess().getDouAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__2__Impl
	rule__Dou__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getDouAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__3__Impl
	rule__Dou__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getCodeAssignment_3()); }
	(rule__Dou__CodeAssignment_3)*
	{ after(grammarAccess.getDouAccess().getCodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__4__Impl
	rule__Dou__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getEnddoKeyword_4()); }
	Enddo
	{ after(grammarAccess.getDouAccess().getEnddoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dou__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDouAccess().getSemicolonKeyword_5()); }
	Semicolon
	{ after(grammarAccess.getDouAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	For
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getVarAssignment_1()); }
	(rule__For__VarAssignment_1)
	{ after(grammarAccess.getForAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getForAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getFromAssignment_3()); }
	(rule__For__FromAssignment_3)
	{ after(grammarAccess.getForAccess().getFromAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getToKeyword_4()); }
	To
	{ after(grammarAccess.getForAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getToAssignment_5()); }
	(rule__For__ToAssignment_5)
	{ after(grammarAccess.getForAccess().getToAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_6()); }
	Semicolon
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCodeAssignment_7()); }
	(rule__For__CodeAssignment_7)*
	{ after(grammarAccess.getForAccess().getCodeAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__8__Impl
	rule__For__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEndforKeyword_8()); }
	Endfor
	{ after(grammarAccess.getForAccess().getEndforKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_9()); }
	Semicolon
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selectblock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__0__Impl
	rule__Selectblock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getSelectblockAction_0()); }
	()
	{ after(grammarAccess.getSelectblockAccess().getSelectblockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__1__Impl
	rule__Selectblock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getSelectParserRuleCall_1()); }
	ruleSelect
	{ after(grammarAccess.getSelectblockAccess().getSelectParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__2__Impl
	rule__Selectblock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getSelectblockAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__3__Impl
	rule__Selectblock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getWhenAssignment_3()); }
	(rule__Selectblock__WhenAssignment_3)*
	{ after(grammarAccess.getSelectblockAccess().getWhenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__4__Impl
	rule__Selectblock__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getOtherAssignment_4()); }
	(rule__Selectblock__OtherAssignment_4)?
	{ after(grammarAccess.getSelectblockAccess().getOtherAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selectblock__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectblockAccess().getEndslParserRuleCall_5()); }
	ruleEndsl
	{ after(grammarAccess.getSelectblockAccess().getEndslParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	Select
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSemicolonKeyword_1()); }
	Semicolon
	{ after(grammarAccess.getSelectAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
	When
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getBooleanParserRuleCall_1()); }
	ruleBoolean
	{ after(grammarAccess.getWhenAccess().getBooleanParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
	rule__When__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getWhenAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhencodeAssignment_3()); }
	(rule__When__WhencodeAssignment_3)*
	{ after(grammarAccess.getWhenAccess().getWhencodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Other__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Other__Group__0__Impl
	rule__Other__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherAccess().getOtherAction_0()); }
	()
	{ after(grammarAccess.getOtherAccess().getOtherAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Other__Group__1__Impl
	rule__Other__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherAccess().getOtherKeyword_1()); }
	Other
	{ after(grammarAccess.getOtherAccess().getOtherKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Other__Group__2__Impl
	rule__Other__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherAccess().getSemicolonKeyword_2()); }
	Semicolon
	{ after(grammarAccess.getOtherAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Other__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherAccess().getOthercodeAssignment_3()); }
	(rule__Other__OthercodeAssignment_3)*
	{ after(grammarAccess.getOtherAccess().getOthercodeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnAction_0()); }
	()
	{ after(grammarAccess.getReturnAccess().getReturnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__1__Impl
	rule__Return__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
	Return
	{ after(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getExpressionAssignment_2()); }
	(rule__Return__ExpressionAssignment_2)?
	{ after(grammarAccess.getReturnAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__0__Impl
	rule__Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
	()
	{ after(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getBoolexprsAssignment_1()); }
	(rule__Boolean__BoolexprsAssignment_1)*
	{ after(grammarAccess.getBooleanAccess().getBoolexprsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpr__Group__0__Impl
	rule__BoolExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExprAccess().getNotKeyword_0()); }
	(Not)?
	{ after(grammarAccess.getBoolExprAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExprAccess().getOrExprParserRuleCall_1()); }
	ruleOrExpr
	{ after(grammarAccess.getBoolExprAccess().getOrExprParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group__0__Impl
	rule__OrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); }
	ruleAndExpr
	{ after(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getGroup_1()); }
	(rule__OrExpr__Group_1__0)*
	{ after(grammarAccess.getOrExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__0__Impl
	rule__OrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExprAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__1__Impl
	rule__OrExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getOrKeyword_1_1()); }
	Or
	{ after(grammarAccess.getOrExprAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
	(rule__OrExpr__RightAssignment_1_2)
	{ after(grammarAccess.getOrExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group__0__Impl
	rule__AndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getPrimaryExprParserRuleCall_0()); }
	rulePrimaryExpr
	{ after(grammarAccess.getAndExprAccess().getPrimaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getGroup_1()); }
	(rule__AndExpr__Group_1__0)*
	{ after(grammarAccess.getAndExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__0__Impl
	rule__AndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExprAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__1__Impl
	rule__AndExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getAndKeyword_1_1()); }
	And
	{ after(grammarAccess.getAndExprAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
	(rule__AndExpr__RightAssignment_1_2)
	{ after(grammarAccess.getAndExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_0__0__Impl
	rule__PrimaryExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryExprAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_0__1__Impl
	rule__PrimaryExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getBoolExprParserRuleCall_0_1()); }
	ruleBoolExpr
	{ after(grammarAccess.getPrimaryExprAccess().getBoolExprParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryExprAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__0__Impl
	rule__Compare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getAlternatives_0()); }
	(rule__Compare__Alternatives_0)
	{ after(grammarAccess.getCompareAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareAccess().getCmpAssignment_1()); }
	(rule__Compare__CmpAssignment_1)?
	{ after(grammarAccess.getCompareAccess().getCmpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compare2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare2__Group__0__Impl
	rule__Compare2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare2Access().getAlternatives_0()); }
	(rule__Compare2__Alternatives_0)
	{ after(grammarAccess.getCompare2Access().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare2Access().getCompareRightParserRuleCall_1()); }
	ruleCompareRight
	{ after(grammarAccess.getCompare2Access().getCompareRightParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareRight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareRight__Group__0__Impl
	rule__CompareRight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareRightAccess().getAlternatives_0()); }
	(rule__CompareRight__Alternatives_0)
	{ after(grammarAccess.getCompareRightAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareRight__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareRightAccess().getCmpAssignment_1()); }
	(rule__CompareRight__CmpAssignment_1)?
	{ after(grammarAccess.getCompareRightAccess().getCmpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dcls__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dcls__Group__0__Impl
	rule__Dcls__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclsAccess().getDclSKeyword_0()); }
	DclS
	{ after(grammarAccess.getDclsAccess().getDclSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dcls__Group__1__Impl
	rule__Dcls__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclsAccess().getNameAssignment_1()); }
	(rule__Dcls__NameAssignment_1)
	{ after(grammarAccess.getDclsAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dcls__Group__2__Impl
	rule__Dcls__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclsAccess().getDatatypeAssignment_2()); }
	(rule__Dcls__DatatypeAssignment_2)
	{ after(grammarAccess.getDclsAccess().getDatatypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dcls__Group__3__Impl
	rule__Dcls__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclsAccess().getOptionsAssignment_3()); }
	(rule__Dcls__OptionsAssignment_3)?
	{ after(grammarAccess.getDclsAccess().getOptionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dcls__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDclsAccess().getSemicolonKeyword_4()); }
	Semicolon
	{ after(grammarAccess.getDclsAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__0__Impl
	rule__Datatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getAlternatives_0()); }
	(rule__Datatype__Alternatives_0)
	{ after(grammarAccess.getDatatypeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getLenAssignment_1()); }
	(rule__Datatype__LenAssignment_1)?
	{ after(grammarAccess.getDatatypeAccess().getLenAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Len__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Len__Group__0__Impl
	rule__Len__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Len__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLenAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getLenAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Len__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Len__Group__1__Impl
	rule__Len__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Len__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLenAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getLenAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Len__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Len__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Len__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLenAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getLenAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Options__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Options__Group__0__Impl
	rule__Options__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionsAccess().getOptionsKeyword_0()); }
	Options
	{ after(grammarAccess.getOptionsAccess().getOptionsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Options__Group__1__Impl
	rule__Options__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionsAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getOptionsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Options__Group__2__Impl
	rule__Options__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionsAccess().getValAssignment_2()); }
	(rule__Options__ValAssignment_2)
	{ after(grammarAccess.getOptionsAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Options__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionsAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getOptionsAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Language__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageAccess().getElementsComponentsParserRuleCall_0()); }
		ruleComponents
		{ after(grammarAccess.getLanguageAccess().getElementsComponentsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ctrlopt__OptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCtrloptAccess().getOptOptParserRuleCall_1_0()); }
		ruleOpt
		{ after(grammarAccess.getCtrloptAccess().getOptOptParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getOptAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Opt__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getOptAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectiveAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDirectiveAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclf__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclfAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDclfAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getOpenAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOpenAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getOpenAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloseAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCloseAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCloseAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCloseAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChainAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getChainAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getChainAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getChainAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReadAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReadAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReadAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reade__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadeAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReadeAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReadeAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReadeAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setll__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetllAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSetllAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSetllAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSetllAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setgt__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetgtAccess().getNameDclfCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSetgtAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSetgtAccess().getNameDclfIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSetgtAccess().getNameDclfCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eof__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEofAccess().getNameDclfCrossReference_2_0()); }
		(
			{ before(grammarAccess.getEofAccess().getNameDclfIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEofAccess().getNameDclfIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getEofAccess().getNameDclfCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rnf__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRnfAccess().getNameDclfCrossReference_2_0()); }
		(
			{ before(grammarAccess.getRnfAccess().getNameDclfIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRnfAccess().getNameDclfIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getRnfAccess().getNameDclfCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclprocAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDclprocAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__DeclareAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclprocAccess().getDeclareDeclareParserRuleCall_3_0()); }
		ruleDeclare
		{ after(grammarAccess.getDclprocAccess().getDeclareDeclareParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dclproc__CodeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclprocAccess().getCodeCodeParserRuleCall_4_0()); }
		ruleCode
		{ after(grammarAccess.getDclprocAccess().getCodeCodeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubrutineAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSubrutineAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subrutine__SubrcodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubrutineAccess().getSubrcodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getSubrutineAccess().getSubrcodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exsr__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExsrAccess().getNameSubrutineCrossReference_1_0()); }
		(
			{ before(grammarAccess.getExsrAccess().getNameSubrutineIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExsrAccess().getNameSubrutineIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getExsrAccess().getNameSubrutineCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getVariableDclsCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getVariableDclsIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getVariableDclsIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getVariableDclsCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IntvalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getIntvalINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getExpressionAccess().getIntvalINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__StrvalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getStrvalSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExpressionAccess().getStrvalSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getVarDclsCrossReference_2_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getVarDclsIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpressionAccess().getVarDclsIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getExpressionAccess().getVarDclsCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ProcvalAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getProcvalDclprocCrossReference_4_0_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getProcvalDclprocIDTerminalRuleCall_4_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpressionAccess().getProcvalDclprocIDTerminalRuleCall_4_0_0_1()); }
		)
		{ after(grammarAccess.getExpressionAccess().getProcvalDclprocCrossReference_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ParmlistAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getParmlistParmlistParserRuleCall_4_2_0()); }
		ruleParmlist
		{ after(grammarAccess.getExpressionAccess().getParmlistParmlistParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parmlist__ParmsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParmlistAccess().getParmsParm2ParserRuleCall_1_0()); }
		ruleParm2
		{ after(grammarAccess.getParmlistAccess().getParmsParm2ParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parm1__ParmAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParm1Access().getParmExpressionParserRuleCall_0()); }
		ruleExpression
		{ after(grammarAccess.getParm1Access().getParmExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__IfcodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfblockAccess().getIfcodeElseifParserRuleCall_1_0()); }
		ruleElseif
		{ after(grammarAccess.getIfblockAccess().getIfcodeElseifParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifblock__IfcodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfblockAccess().getIfcodeElseParserRuleCall_2_0()); }
		ruleElse
		{ after(grammarAccess.getIfblockAccess().getIfcodeElseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__IfcodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIfcodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getIfAccess().getIfcodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Elseif__IfcodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseifAccess().getIfcodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getElseifAccess().getIfcodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__IfcodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseAccess().getIfcodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getElseAccess().getIfcodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Do__CodeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoAccess().getCodeCodeParserRuleCall_2_0()); }
		ruleCode
		{ after(grammarAccess.getDoAccess().getCodeCodeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__DowAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDowAccess().getDowBooleanParserRuleCall_1_0()); }
		ruleBoolean
		{ after(grammarAccess.getDowAccess().getDowBooleanParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dow__CodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDowAccess().getCodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getDowAccess().getCodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__DouAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDouAccess().getDouBooleanParserRuleCall_1_0()); }
		ruleBoolean
		{ after(grammarAccess.getDouAccess().getDouBooleanParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dou__CodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDouAccess().getCodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getDouAccess().getCodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getVarDclsCrossReference_1_0()); }
		(
			{ before(grammarAccess.getForAccess().getVarDclsIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForAccess().getVarDclsIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getForAccess().getVarDclsCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__FromAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getFromExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getForAccess().getFromExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__ToAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getToExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getForAccess().getToExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__CodeAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getCodeCodeParserRuleCall_7_0()); }
		ruleCode
		{ after(grammarAccess.getForAccess().getCodeCodeParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__WhenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectblockAccess().getWhenWhenParserRuleCall_3_0()); }
		ruleWhen
		{ after(grammarAccess.getSelectblockAccess().getWhenWhenParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selectblock__OtherAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectblockAccess().getOtherOtherParserRuleCall_4_0()); }
		ruleOther
		{ after(grammarAccess.getSelectblockAccess().getOtherOtherParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__WhencodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getWhencodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getWhenAccess().getWhencodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Other__OthercodeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOtherAccess().getOthercodeCodeParserRuleCall_3_0()); }
		ruleCode
		{ after(grammarAccess.getOtherAccess().getOthercodeCodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__BoolexprsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getBoolexprsBoolExprParserRuleCall_1_0()); }
		ruleBoolExpr
		{ after(grammarAccess.getBooleanAccess().getBoolexprsBoolExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
		ruleAndExpr
		{ after(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExprAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
		rulePrimaryExpr
		{ after(grammarAccess.getAndExprAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__SpecAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getSpecSpecialParserRuleCall_0_0_0()); }
		ruleSpecial
		{ after(grammarAccess.getCompareAccess().getSpecSpecialParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Intval2Assignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getIntval2INTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCompareAccess().getIntval2INTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Strval2Assignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getStrval2STRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCompareAccess().getStrval2STRINGTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Var2Assignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getVar2DclsCrossReference_0_3_0()); }
		(
			{ before(grammarAccess.getCompareAccess().getVar2DclsIDTerminalRuleCall_0_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCompareAccess().getVar2DclsIDTerminalRuleCall_0_3_0_1()); }
		)
		{ after(grammarAccess.getCompareAccess().getVar2DclsCrossReference_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Bif2Assignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getBif2BifParserRuleCall_0_4_0()); }
		ruleBif
		{ after(grammarAccess.getCompareAccess().getBif2BifParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__CmpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareAccess().getCmpCompare2ParserRuleCall_1_0()); }
		ruleCompare2
		{ after(grammarAccess.getCompareAccess().getCmpCompare2ParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__SpecAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getSpecSpecialParserRuleCall_0_0_0()); }
		ruleSpecial
		{ after(grammarAccess.getCompareRightAccess().getSpecSpecialParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Intval2Assignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getIntval2INTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCompareRightAccess().getIntval2INTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Strval2Assignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getStrval2STRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCompareRightAccess().getStrval2STRINGTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Var2Assignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getVar2DclsCrossReference_0_3_0()); }
		(
			{ before(grammarAccess.getCompareRightAccess().getVar2DclsIDTerminalRuleCall_0_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCompareRightAccess().getVar2DclsIDTerminalRuleCall_0_3_0_1()); }
		)
		{ after(grammarAccess.getCompareRightAccess().getVar2DclsCrossReference_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__Bif2Assignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getBif2BifParserRuleCall_0_4_0()); }
		ruleBif
		{ after(grammarAccess.getCompareRightAccess().getBif2BifParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareRight__CmpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareRightAccess().getCmpCompare2ParserRuleCall_1_0()); }
		ruleCompare2
		{ after(grammarAccess.getCompareRightAccess().getCmpCompare2ParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclsAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDclsAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__DatatypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclsAccess().getDatatypeDatatypeParserRuleCall_2_0()); }
		ruleDatatype
		{ after(grammarAccess.getDclsAccess().getDatatypeDatatypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dcls__OptionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDclsAccess().getOptionsOptionsParserRuleCall_3_0()); }
		ruleOptions
		{ after(grammarAccess.getDclsAccess().getOptionsOptionsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__LenAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getLenLenParserRuleCall_1_0()); }
		ruleLen
		{ after(grammarAccess.getDatatypeAccess().getLenLenParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Options__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptionsAccess().getValSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOptionsAccess().getValSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
