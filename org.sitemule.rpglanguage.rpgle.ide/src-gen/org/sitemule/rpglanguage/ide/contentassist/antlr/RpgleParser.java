/*
 * generated by Xtext 2.19.0
 */
package org.sitemule.rpglanguage.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.sitemule.rpglanguage.ide.contentassist.antlr.internal.InternalRpgleParser;
import org.sitemule.rpglanguage.services.RpgleGrammarAccess;

public class RpgleParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RpgleGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RpgleGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComponentsAccess().getAlternatives(), "rule__Components__Alternatives");
			builder.put(grammarAccess.getDeclareAccess().getAlternatives(), "rule__Declare__Alternatives");
			builder.put(grammarAccess.getFileioAccess().getAlternatives(), "rule__Fileio__Alternatives");
			builder.put(grammarAccess.getCodeAccess().getAlternatives_0(), "rule__Code__Alternatives_0");
			builder.put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getBifAccess().getAlternatives(), "rule__Bif__Alternatives");
			builder.put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
			builder.put(grammarAccess.getCompareAccess().getAlternatives_0(), "rule__Compare__Alternatives_0");
			builder.put(grammarAccess.getCompare2Access().getAlternatives_0(), "rule__Compare2__Alternatives_0");
			builder.put(grammarAccess.getCompareRightAccess().getAlternatives_0(), "rule__CompareRight__Alternatives_0");
			builder.put(grammarAccess.getSpecialAccess().getAlternatives(), "rule__Special__Alternatives");
			builder.put(grammarAccess.getDatatypeAccess().getAlternatives_0(), "rule__Datatype__Alternatives_0");
			builder.put(grammarAccess.getCtrloptAccess().getGroup(), "rule__Ctrlopt__Group__0");
			builder.put(grammarAccess.getOptAccess().getGroup(), "rule__Opt__Group__0");
			builder.put(grammarAccess.getOptAccess().getGroup_1(), "rule__Opt__Group_1__0");
			builder.put(grammarAccess.getDirectiveAccess().getGroup(), "rule__Directive__Group__0");
			builder.put(grammarAccess.getDclfAccess().getGroup(), "rule__Dclf__Group__0");
			builder.put(grammarAccess.getOpenAccess().getGroup(), "rule__Open__Group__0");
			builder.put(grammarAccess.getCloseAccess().getGroup(), "rule__Close__Group__0");
			builder.put(grammarAccess.getChainAccess().getGroup(), "rule__Chain__Group__0");
			builder.put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
			builder.put(grammarAccess.getReadeAccess().getGroup(), "rule__Reade__Group__0");
			builder.put(grammarAccess.getSetllAccess().getGroup(), "rule__Setll__Group__0");
			builder.put(grammarAccess.getSetgtAccess().getGroup(), "rule__Setgt__Group__0");
			builder.put(grammarAccess.getEofAccess().getGroup(), "rule__Eof__Group__0");
			builder.put(grammarAccess.getRnfAccess().getGroup(), "rule__Rnf__Group__0");
			builder.put(grammarAccess.getDclprocAccess().getGroup(), "rule__Dclproc__Group__0");
			builder.put(grammarAccess.getCodeAccess().getGroup(), "rule__Code__Group__0");
			builder.put(grammarAccess.getSubrutineAccess().getGroup(), "rule__Subrutine__Group__0");
			builder.put(grammarAccess.getExsrAccess().getGroup(), "rule__Exsr__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
			builder.put(grammarAccess.getParmlistAccess().getGroup(), "rule__Parmlist__Group__0");
			builder.put(grammarAccess.getParm2Access().getGroup(), "rule__Parm2__Group__0");
			builder.put(grammarAccess.getIfblockAccess().getGroup(), "rule__Ifblock__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getElseifAccess().getGroup(), "rule__Elseif__Group__0");
			builder.put(grammarAccess.getElseAccess().getGroup(), "rule__Else__Group__0");
			builder.put(grammarAccess.getDoAccess().getGroup(), "rule__Do__Group__0");
			builder.put(grammarAccess.getDowAccess().getGroup(), "rule__Dow__Group__0");
			builder.put(grammarAccess.getDouAccess().getGroup(), "rule__Dou__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getSelectblockAccess().getGroup(), "rule__Selectblock__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getWhenAccess().getGroup(), "rule__When__Group__0");
			builder.put(grammarAccess.getOtherAccess().getGroup(), "rule__Other__Group__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
			builder.put(grammarAccess.getBoolExprAccess().getGroup(), "rule__BoolExpr__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
			builder.put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
			builder.put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
			builder.put(grammarAccess.getPrimaryExprAccess().getGroup_0(), "rule__PrimaryExpr__Group_0__0");
			builder.put(grammarAccess.getCompareAccess().getGroup(), "rule__Compare__Group__0");
			builder.put(grammarAccess.getCompare2Access().getGroup(), "rule__Compare2__Group__0");
			builder.put(grammarAccess.getCompareRightAccess().getGroup(), "rule__CompareRight__Group__0");
			builder.put(grammarAccess.getDclsAccess().getGroup(), "rule__Dcls__Group__0");
			builder.put(grammarAccess.getDatatypeAccess().getGroup(), "rule__Datatype__Group__0");
			builder.put(grammarAccess.getLenAccess().getGroup(), "rule__Len__Group__0");
			builder.put(grammarAccess.getOptionsAccess().getGroup(), "rule__Options__Group__0");
			builder.put(grammarAccess.getLanguageAccess().getElementsAssignment(), "rule__Language__ElementsAssignment");
			builder.put(grammarAccess.getCtrloptAccess().getOptAssignment_1(), "rule__Ctrlopt__OptAssignment_1");
			builder.put(grammarAccess.getOptAccess().getNameAssignment_0(), "rule__Opt__NameAssignment_0");
			builder.put(grammarAccess.getOptAccess().getValueAssignment_1_1(), "rule__Opt__ValueAssignment_1_1");
			builder.put(grammarAccess.getDirectiveAccess().getNameAssignment_1(), "rule__Directive__NameAssignment_1");
			builder.put(grammarAccess.getDclfAccess().getNameAssignment_1(), "rule__Dclf__NameAssignment_1");
			builder.put(grammarAccess.getOpenAccess().getNameAssignment_1(), "rule__Open__NameAssignment_1");
			builder.put(grammarAccess.getCloseAccess().getNameAssignment_1(), "rule__Close__NameAssignment_1");
			builder.put(grammarAccess.getChainAccess().getNameAssignment_1(), "rule__Chain__NameAssignment_1");
			builder.put(grammarAccess.getReadAccess().getNameAssignment_1(), "rule__Read__NameAssignment_1");
			builder.put(grammarAccess.getReadeAccess().getNameAssignment_1(), "rule__Reade__NameAssignment_1");
			builder.put(grammarAccess.getSetllAccess().getNameAssignment_1(), "rule__Setll__NameAssignment_1");
			builder.put(grammarAccess.getSetgtAccess().getNameAssignment_1(), "rule__Setgt__NameAssignment_1");
			builder.put(grammarAccess.getEofAccess().getNameAssignment_2(), "rule__Eof__NameAssignment_2");
			builder.put(grammarAccess.getRnfAccess().getNameAssignment_2(), "rule__Rnf__NameAssignment_2");
			builder.put(grammarAccess.getDclprocAccess().getNameAssignment_1(), "rule__Dclproc__NameAssignment_1");
			builder.put(grammarAccess.getDclprocAccess().getDeclareAssignment_3(), "rule__Dclproc__DeclareAssignment_3");
			builder.put(grammarAccess.getDclprocAccess().getCodeAssignment_4(), "rule__Dclproc__CodeAssignment_4");
			builder.put(grammarAccess.getSubrutineAccess().getNameAssignment_1(), "rule__Subrutine__NameAssignment_1");
			builder.put(grammarAccess.getSubrutineAccess().getSubrcodeAssignment_3(), "rule__Subrutine__SubrcodeAssignment_3");
			builder.put(grammarAccess.getExsrAccess().getNameAssignment_1(), "rule__Exsr__NameAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getIntvalAssignment_0(), "rule__Expression__IntvalAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getStrvalAssignment_1(), "rule__Expression__StrvalAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getVarAssignment_2(), "rule__Expression__VarAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getProcvalAssignment_4_0(), "rule__Expression__ProcvalAssignment_4_0");
			builder.put(grammarAccess.getExpressionAccess().getParmlistAssignment_4_2(), "rule__Expression__ParmlistAssignment_4_2");
			builder.put(grammarAccess.getParmlistAccess().getParmsAssignment_1(), "rule__Parmlist__ParmsAssignment_1");
			builder.put(grammarAccess.getParm1Access().getParmAssignment(), "rule__Parm1__ParmAssignment");
			builder.put(grammarAccess.getIfblockAccess().getIfcodeAssignment_1(), "rule__Ifblock__IfcodeAssignment_1");
			builder.put(grammarAccess.getIfblockAccess().getIfcodeAssignment_2(), "rule__Ifblock__IfcodeAssignment_2");
			builder.put(grammarAccess.getIfAccess().getIfcodeAssignment_3(), "rule__If__IfcodeAssignment_3");
			builder.put(grammarAccess.getElseifAccess().getIfcodeAssignment_3(), "rule__Elseif__IfcodeAssignment_3");
			builder.put(grammarAccess.getElseAccess().getIfcodeAssignment_3(), "rule__Else__IfcodeAssignment_3");
			builder.put(grammarAccess.getDoAccess().getCodeAssignment_2(), "rule__Do__CodeAssignment_2");
			builder.put(grammarAccess.getDowAccess().getDowAssignment_1(), "rule__Dow__DowAssignment_1");
			builder.put(grammarAccess.getDowAccess().getCodeAssignment_3(), "rule__Dow__CodeAssignment_3");
			builder.put(grammarAccess.getDouAccess().getDouAssignment_1(), "rule__Dou__DouAssignment_1");
			builder.put(grammarAccess.getDouAccess().getCodeAssignment_3(), "rule__Dou__CodeAssignment_3");
			builder.put(grammarAccess.getForAccess().getVarAssignment_1(), "rule__For__VarAssignment_1");
			builder.put(grammarAccess.getForAccess().getFromAssignment_3(), "rule__For__FromAssignment_3");
			builder.put(grammarAccess.getForAccess().getToAssignment_5(), "rule__For__ToAssignment_5");
			builder.put(grammarAccess.getForAccess().getCodeAssignment_7(), "rule__For__CodeAssignment_7");
			builder.put(grammarAccess.getSelectblockAccess().getWhenAssignment_3(), "rule__Selectblock__WhenAssignment_3");
			builder.put(grammarAccess.getSelectblockAccess().getOtherAssignment_4(), "rule__Selectblock__OtherAssignment_4");
			builder.put(grammarAccess.getWhenAccess().getWhencodeAssignment_3(), "rule__When__WhencodeAssignment_3");
			builder.put(grammarAccess.getOtherAccess().getOthercodeAssignment_3(), "rule__Other__OthercodeAssignment_3");
			builder.put(grammarAccess.getReturnAccess().getExpressionAssignment_2(), "rule__Return__ExpressionAssignment_2");
			builder.put(grammarAccess.getBooleanAccess().getBoolexprsAssignment_1(), "rule__Boolean__BoolexprsAssignment_1");
			builder.put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getCompareAccess().getSpecAssignment_0_0(), "rule__Compare__SpecAssignment_0_0");
			builder.put(grammarAccess.getCompareAccess().getIntval2Assignment_0_1(), "rule__Compare__Intval2Assignment_0_1");
			builder.put(grammarAccess.getCompareAccess().getStrval2Assignment_0_2(), "rule__Compare__Strval2Assignment_0_2");
			builder.put(grammarAccess.getCompareAccess().getVar2Assignment_0_3(), "rule__Compare__Var2Assignment_0_3");
			builder.put(grammarAccess.getCompareAccess().getBif2Assignment_0_4(), "rule__Compare__Bif2Assignment_0_4");
			builder.put(grammarAccess.getCompareAccess().getCmpAssignment_1(), "rule__Compare__CmpAssignment_1");
			builder.put(grammarAccess.getCompareRightAccess().getSpecAssignment_0_0(), "rule__CompareRight__SpecAssignment_0_0");
			builder.put(grammarAccess.getCompareRightAccess().getIntval2Assignment_0_1(), "rule__CompareRight__Intval2Assignment_0_1");
			builder.put(grammarAccess.getCompareRightAccess().getStrval2Assignment_0_2(), "rule__CompareRight__Strval2Assignment_0_2");
			builder.put(grammarAccess.getCompareRightAccess().getVar2Assignment_0_3(), "rule__CompareRight__Var2Assignment_0_3");
			builder.put(grammarAccess.getCompareRightAccess().getBif2Assignment_0_4(), "rule__CompareRight__Bif2Assignment_0_4");
			builder.put(grammarAccess.getCompareRightAccess().getCmpAssignment_1(), "rule__CompareRight__CmpAssignment_1");
			builder.put(grammarAccess.getDclsAccess().getNameAssignment_1(), "rule__Dcls__NameAssignment_1");
			builder.put(grammarAccess.getDclsAccess().getDatatypeAssignment_2(), "rule__Dcls__DatatypeAssignment_2");
			builder.put(grammarAccess.getDclsAccess().getOptionsAssignment_3(), "rule__Dcls__OptionsAssignment_3");
			builder.put(grammarAccess.getDatatypeAccess().getLenAssignment_1(), "rule__Datatype__LenAssignment_1");
			builder.put(grammarAccess.getOptionsAccess().getValAssignment_2(), "rule__Options__ValAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RpgleGrammarAccess grammarAccess;

	@Override
	protected InternalRpgleParser createParser() {
		InternalRpgleParser result = new InternalRpgleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RpgleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RpgleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
