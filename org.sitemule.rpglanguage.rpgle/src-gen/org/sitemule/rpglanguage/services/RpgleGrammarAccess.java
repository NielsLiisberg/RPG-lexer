/*
 * generated by Xtext 2.19.0
 */
package org.sitemule.rpglanguage.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RpgleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Language");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsComponentsParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Language:
		//	elements+=Components*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Components*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Components
		public RuleCall getElementsComponentsParserRuleCall_0() { return cElementsComponentsParserRuleCall_0; }
	}
	public class ComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Components");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCtrloptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclareParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Components:
		//	Ctrlopt | Directive | Declare;
		@Override public ParserRule getRule() { return rule; }
		
		//Ctrlopt | Directive | Declare
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ctrlopt
		public RuleCall getCtrloptParserRuleCall_0() { return cCtrloptParserRuleCall_0; }
		
		//Directive
		public RuleCall getDirectiveParserRuleCall_1() { return cDirectiveParserRuleCall_1; }
		
		//Declare
		public RuleCall getDeclareParserRuleCall_2() { return cDeclareParserRuleCall_2; }
	}
	public class CtrloptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Ctrlopt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCtlOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptOptParserRuleCall_1_0 = (RuleCall)cOptAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Ctrlopt:
		//	'ctl-opt' opt+=Opt+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ctl-opt' opt+=Opt+ ';'
		public Group getGroup() { return cGroup; }
		
		//'ctl-opt'
		public Keyword getCtlOptKeyword_0() { return cCtlOptKeyword_0; }
		
		//opt+=Opt+
		public Assignment getOptAssignment_1() { return cOptAssignment_1; }
		
		//Opt
		public RuleCall getOptOptParserRuleCall_1_0() { return cOptOptParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Opt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Opt:
		//	name=ID ('(' value=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' value=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' value=STRING ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Directive:
		//	'/include' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'/include' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'/include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Declare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDclprocParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDclsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDclfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declare:
		//	Dclproc | Dcls | Dclf;
		@Override public ParserRule getRule() { return rule; }
		
		//Dclproc | Dcls | Dclf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dclproc
		public RuleCall getDclprocParserRuleCall_0() { return cDclprocParserRuleCall_0; }
		
		//Dcls
		public RuleCall getDclsParserRuleCall_1() { return cDclsParserRuleCall_1; }
		
		//Dclf
		public RuleCall getDclfParserRuleCall_2() { return cDclfParserRuleCall_2; }
	}
	public class DclfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Dclf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDclFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// ---------------------- files ------------------------
		//Dclf:
		//	'dcl-f' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'dcl-f' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'dcl-f'
		public Keyword getDclFKeyword_0() { return cDclFKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class FileioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Fileio");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCloseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReadParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReadeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSetllParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSetgtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEofParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRnfParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Fileio:
		//	Open | Close | Chain | Read | Reade | Setll | Setgt | Eof | Rnf;
		@Override public ParserRule getRule() { return rule; }
		
		//Open | Close | Chain | Read | Reade | Setll | Setgt | Eof | Rnf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Open
		public RuleCall getOpenParserRuleCall_0() { return cOpenParserRuleCall_0; }
		
		//Close
		public RuleCall getCloseParserRuleCall_1() { return cCloseParserRuleCall_1; }
		
		//Chain
		public RuleCall getChainParserRuleCall_2() { return cChainParserRuleCall_2; }
		
		//Read
		public RuleCall getReadParserRuleCall_3() { return cReadParserRuleCall_3; }
		
		//Reade
		public RuleCall getReadeParserRuleCall_4() { return cReadeParserRuleCall_4; }
		
		//Setll
		public RuleCall getSetllParserRuleCall_5() { return cSetllParserRuleCall_5; }
		
		//Setgt
		public RuleCall getSetgtParserRuleCall_6() { return cSetgtParserRuleCall_6; }
		
		//Eof
		public RuleCall getEofParserRuleCall_7() { return cEofParserRuleCall_7; }
		
		//Rnf
		public RuleCall getRnfParserRuleCall_8() { return cRnfParserRuleCall_8; }
	}
	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Open:
		//	'open' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'open' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Close");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCloseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Close:
		//	'close' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'close' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'close'
		public Keyword getCloseKeyword_0() { return cCloseKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class ChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Chain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Chain:
		//	'chain' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'chain' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'chain'
		public Keyword getChainKeyword_0() { return cChainKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Read:
		//	'read' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'read' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class ReadeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Reade");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Reade:
		//	'reade' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'reade' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'reade'
		public Keyword getReadeKeyword_0() { return cReadeKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class SetllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Setll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Setll:
		//	'setll' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'setll' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'setll'
		public Keyword getSetllKeyword_0() { return cSetllKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class SetgtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Setgt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetgtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDclfCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDclfCrossReference_1_0.eContents().get(1);
		
		//Setgt:
		//	'setgt' name=[Dclf];
		@Override public ParserRule getRule() { return rule; }
		
		//'setgt' name=[Dclf]
		public Group getGroup() { return cGroup; }
		
		//'setgt'
		public Keyword getSetgtKeyword_0() { return cSetgtKeyword_0; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_1_0() { return cNameDclfCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_1_0_1() { return cNameDclfIDTerminalRuleCall_1_0_1; }
	}
	public class EofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Eof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameDclfCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_2_0_1 = (RuleCall)cNameDclfCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Eof:
		//	'%eof' '(' name=[Dclf] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'%eof' '(' name=[Dclf] ')'
		public Group getGroup() { return cGroup; }
		
		//'%eof'
		public Keyword getEofKeyword_0() { return cEofKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_2_0() { return cNameDclfCrossReference_2_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_2_0_1() { return cNameDclfIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RnfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Rnf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRnfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameDclfCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameDclfIDTerminalRuleCall_2_0_1 = (RuleCall)cNameDclfCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rnf:
		//	'%rnf' '(' name=[Dclf] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'%rnf' '(' name=[Dclf] ')'
		public Group getGroup() { return cGroup; }
		
		//'%rnf'
		public Keyword getRnfKeyword_0() { return cRnfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=[Dclf]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[Dclf]
		public CrossReference getNameDclfCrossReference_2_0() { return cNameDclfCrossReference_2_0; }
		
		//ID
		public RuleCall getNameDclfIDTerminalRuleCall_2_0_1() { return cNameDclfIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DclprocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Dclproc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDclProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclareAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclareDeclareParserRuleCall_3_0 = (RuleCall)cDeclareAssignment_3.eContents().get(0);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeCodeParserRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		private final Keyword cEndProcKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Procedures:
		//// ---------------------------------------------------
		//Dclproc:
		//	'dcl-proc' name=ID ';' declare+=Declare* code+=Code* 'end-proc;';
		@Override public ParserRule getRule() { return rule; }
		
		//'dcl-proc' name=ID ';' declare+=Declare* code+=Code* 'end-proc;'
		public Group getGroup() { return cGroup; }
		
		//'dcl-proc'
		public Keyword getDclProcKeyword_0() { return cDclProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//declare+=Declare*
		public Assignment getDeclareAssignment_3() { return cDeclareAssignment_3; }
		
		//Declare
		public RuleCall getDeclareDeclareParserRuleCall_3_0() { return cDeclareDeclareParserRuleCall_3_0; }
		
		//code+=Code*
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }
		
		//Code
		public RuleCall getCodeCodeParserRuleCall_4_0() { return cCodeCodeParserRuleCall_4_0; }
		
		//'end-proc;'
		public Keyword getEndProcKeyword_5() { return cEndProcKeyword_5; }
	}
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cStmtParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSubrutineParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Code:
		//	(Stmt | Subrutine) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Stmt | Subrutine) ';'
		public Group getGroup() { return cGroup; }
		
		//(Stmt | Subrutine)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Stmt
		public RuleCall getStmtParserRuleCall_0_0() { return cStmtParserRuleCall_0_0; }
		
		//Subrutine
		public RuleCall getSubrutineParserRuleCall_0_1() { return cSubrutineParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SubrutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Subrutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBegsrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubrcodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubrcodeCodeParserRuleCall_3_0 = (RuleCall)cSubrcodeAssignment_3.eContents().get(0);
		private final Keyword cEndsrKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Subrutine
		//// ---------------------------------------------------
		//Subrutine:
		//	'begsr' name=ID ';' subrcode+=Code* 'endsr';
		@Override public ParserRule getRule() { return rule; }
		
		//'begsr' name=ID ';' subrcode+=Code* 'endsr'
		public Group getGroup() { return cGroup; }
		
		//'begsr'
		public Keyword getBegsrKeyword_0() { return cBegsrKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//subrcode+=Code*
		public Assignment getSubrcodeAssignment_3() { return cSubrcodeAssignment_3; }
		
		//Code
		public RuleCall getSubrcodeCodeParserRuleCall_3_0() { return cSubrcodeCodeParserRuleCall_3_0; }
		
		//'endsr'
		public Keyword getEndsrKeyword_4() { return cEndsrKeyword_4; }
	}
	public class ExsrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Exsr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExsrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameSubrutineCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSubrutineIDTerminalRuleCall_1_0_1 = (RuleCall)cNameSubrutineCrossReference_1_0.eContents().get(1);
		
		//Exsr:
		//	'exsr' name=[Subrutine];
		@Override public ParserRule getRule() { return rule; }
		
		//'exsr' name=[Subrutine]
		public Group getGroup() { return cGroup; }
		
		//'exsr'
		public Keyword getExsrKeyword_0() { return cExsrKeyword_0; }
		
		//name=[Subrutine]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Subrutine]
		public CrossReference getNameSubrutineCrossReference_1_0() { return cNameSubrutineCrossReference_1_0; }
		
		//ID
		public RuleCall getNameSubrutineIDTerminalRuleCall_1_0_1() { return cNameSubrutineIDTerminalRuleCall_1_0_1; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfblockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDouParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectblockParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExsrParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFileioParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReturnParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Stmt:
		//	Assignment | Ifblock | Do | Dow | Dou | For | Selectblock | Exsr | Fileio | Return;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Ifblock | Do | Dow | Dou | For | Selectblock | Exsr | Fileio | Return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Ifblock
		public RuleCall getIfblockParserRuleCall_1() { return cIfblockParserRuleCall_1; }
		
		//Do
		public RuleCall getDoParserRuleCall_2() { return cDoParserRuleCall_2; }
		
		//Dow
		public RuleCall getDowParserRuleCall_3() { return cDowParserRuleCall_3; }
		
		//Dou
		public RuleCall getDouParserRuleCall_4() { return cDouParserRuleCall_4; }
		
		//For
		public RuleCall getForParserRuleCall_5() { return cForParserRuleCall_5; }
		
		//Selectblock
		public RuleCall getSelectblockParserRuleCall_6() { return cSelectblockParserRuleCall_6; }
		
		//Exsr
		public RuleCall getExsrParserRuleCall_7() { return cExsrParserRuleCall_7; }
		
		//Fileio
		public RuleCall getFileioParserRuleCall_8() { return cFileioParserRuleCall_8; }
		
		//Return
		public RuleCall getReturnParserRuleCall_9() { return cReturnParserRuleCall_9; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableDclsCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableDclsIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableDclsCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		///*	
		////	Or|If|Do|Dow|Dou|Select|Begsr|Endsr|Endif|Endsl|Enddo|Endfor|When|Exsr|Else|Elseif|Other;
		//*/ Assignment:
		//	variable=[Dcls] '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Dcls] '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//variable=[Dcls]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Dcls]
		public CrossReference getVariableDclsCrossReference_0_0() { return cVariableDclsCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableDclsIDTerminalRuleCall_0_0_1() { return cVariableDclsIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntvalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntvalINTTerminalRuleCall_0_0 = (RuleCall)cIntvalAssignment_0.eContents().get(0);
		private final Assignment cStrvalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrvalSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrvalAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cVarDclsCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarDclsIDTerminalRuleCall_2_0_1 = (RuleCall)cVarDclsCrossReference_2_0.eContents().get(1);
		private final RuleCall cBifParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cProcvalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cProcvalDclprocCrossReference_4_0_0 = (CrossReference)cProcvalAssignment_4_0.eContents().get(0);
		private final RuleCall cProcvalDclprocIDTerminalRuleCall_4_0_0_1 = (RuleCall)cProcvalDclprocCrossReference_4_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParmlistAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParmlistParmlistParserRuleCall_4_2_0 = (RuleCall)cParmlistAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Expression:
		//	intval=INT | strval=STRING | var=[Dcls] | Bif | procval=[Dclproc] '(' parmlist+=Parmlist? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//intval=INT | strval=STRING | var=[Dcls] | Bif | procval=[Dclproc] '(' parmlist+=Parmlist? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intval=INT
		public Assignment getIntvalAssignment_0() { return cIntvalAssignment_0; }
		
		//INT
		public RuleCall getIntvalINTTerminalRuleCall_0_0() { return cIntvalINTTerminalRuleCall_0_0; }
		
		//strval=STRING
		public Assignment getStrvalAssignment_1() { return cStrvalAssignment_1; }
		
		//STRING
		public RuleCall getStrvalSTRINGTerminalRuleCall_1_0() { return cStrvalSTRINGTerminalRuleCall_1_0; }
		
		//var=[Dcls]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//[Dcls]
		public CrossReference getVarDclsCrossReference_2_0() { return cVarDclsCrossReference_2_0; }
		
		//ID
		public RuleCall getVarDclsIDTerminalRuleCall_2_0_1() { return cVarDclsIDTerminalRuleCall_2_0_1; }
		
		//Bif
		public RuleCall getBifParserRuleCall_3() { return cBifParserRuleCall_3; }
		
		//procval=[Dclproc] '(' parmlist+=Parmlist? ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//procval=[Dclproc]
		public Assignment getProcvalAssignment_4_0() { return cProcvalAssignment_4_0; }
		
		//[Dclproc]
		public CrossReference getProcvalDclprocCrossReference_4_0_0() { return cProcvalDclprocCrossReference_4_0_0; }
		
		//ID
		public RuleCall getProcvalDclprocIDTerminalRuleCall_4_0_0_1() { return cProcvalDclprocIDTerminalRuleCall_4_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//parmlist+=Parmlist?
		public Assignment getParmlistAssignment_4_2() { return cParmlistAssignment_4_2; }
		
		//Parmlist
		public RuleCall getParmlistParmlistParserRuleCall_4_2_0() { return cParmlistParmlistParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class BifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Bif");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEofParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRnfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Bif:
		//	Eof | Rnf;
		@Override public ParserRule getRule() { return rule; }
		
		//Eof | Rnf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Eof
		public RuleCall getEofParserRuleCall_0() { return cEofParserRuleCall_0; }
		
		//Rnf
		public RuleCall getRnfParserRuleCall_1() { return cRnfParserRuleCall_1; }
	}
	public class ParmlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Parmlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParm1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParmsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParmsParm2ParserRuleCall_1_0 = (RuleCall)cParmsAssignment_1.eContents().get(0);
		
		//Parmlist:
		//	Parm1 parms+=Parm2*;
		@Override public ParserRule getRule() { return rule; }
		
		//Parm1 parms+=Parm2*
		public Group getGroup() { return cGroup; }
		
		//Parm1
		public RuleCall getParm1ParserRuleCall_0() { return cParm1ParserRuleCall_0; }
		
		//parms+=Parm2*
		public Assignment getParmsAssignment_1() { return cParmsAssignment_1; }
		
		//Parm2
		public RuleCall getParmsParm2ParserRuleCall_1_0() { return cParmsParm2ParserRuleCall_1_0; }
	}
	public class Parm1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Parm1");
		private final Assignment cParmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParmExpressionParserRuleCall_0 = (RuleCall)cParmAssignment.eContents().get(0);
		
		//Parm1:
		//	parm=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//parm=Expression
		public Assignment getParmAssignment() { return cParmAssignment; }
		
		//Expression
		public RuleCall getParmExpressionParserRuleCall_0() { return cParmExpressionParserRuleCall_0; }
	}
	public class Parm2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Parm2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cParm1ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Parm2:
		//	':' Parm1;
		@Override public ParserRule getRule() { return rule; }
		
		//':' Parm1
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//Parm1
		public RuleCall getParm1ParserRuleCall_1() { return cParm1ParserRuleCall_1; }
	}
	public class IfblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Ifblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIfcodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfcodeElseifParserRuleCall_1_0 = (RuleCall)cIfcodeAssignment_1.eContents().get(0);
		private final Assignment cIfcodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfcodeElseParserRuleCall_2_0 = (RuleCall)cIfcodeAssignment_2.eContents().get(0);
		private final RuleCall cEndifParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// ------------------- IF --------------
		//Ifblock:
		//	If ifcode+=Elseif* ifcode+=Else? Endif;
		@Override public ParserRule getRule() { return rule; }
		
		//If ifcode+=Elseif* ifcode+=Else? Endif
		public Group getGroup() { return cGroup; }
		
		//If
		public RuleCall getIfParserRuleCall_0() { return cIfParserRuleCall_0; }
		
		//ifcode+=Elseif*
		public Assignment getIfcodeAssignment_1() { return cIfcodeAssignment_1; }
		
		//Elseif
		public RuleCall getIfcodeElseifParserRuleCall_1_0() { return cIfcodeElseifParserRuleCall_1_0; }
		
		//ifcode+=Else?
		public Assignment getIfcodeAssignment_2() { return cIfcodeAssignment_2; }
		
		//Else
		public RuleCall getIfcodeElseParserRuleCall_2_0() { return cIfcodeElseParserRuleCall_2_0; }
		
		//Endif
		public RuleCall getEndifParserRuleCall_3() { return cEndifParserRuleCall_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfcodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfcodeCodeParserRuleCall_3_0 = (RuleCall)cIfcodeAssignment_3.eContents().get(0);
		
		//If:
		//	'if' Boolean ';'
		//	ifcode+=Code*;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' Boolean ';' ifcode+=Code*
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//ifcode+=Code*
		public Assignment getIfcodeAssignment_3() { return cIfcodeAssignment_3; }
		
		//Code
		public RuleCall getIfcodeCodeParserRuleCall_3_0() { return cIfcodeCodeParserRuleCall_3_0; }
	}
	public class ElseifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Elseif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfcodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfcodeCodeParserRuleCall_3_0 = (RuleCall)cIfcodeAssignment_3.eContents().get(0);
		
		//Elseif:
		//	'elseif' Boolean ';'
		//	ifcode+=Code*;
		@Override public ParserRule getRule() { return rule; }
		
		//'elseif' Boolean ';' ifcode+=Code*
		public Group getGroup() { return cGroup; }
		
		//'elseif'
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//ifcode+=Code*
		public Assignment getIfcodeAssignment_3() { return cIfcodeAssignment_3; }
		
		//Code
		public RuleCall getIfcodeCodeParserRuleCall_3_0() { return cIfcodeCodeParserRuleCall_3_0; }
	}
	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfcodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfcodeCodeParserRuleCall_3_0 = (RuleCall)cIfcodeAssignment_3.eContents().get(0);
		
		//Else:
		//	{Else} 'else' ';'
		//	ifcode+=Code*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Else} 'else' ';' ifcode+=Code*
		public Group getGroup() { return cGroup; }
		
		//{Else}
		public Action getElseAction_0() { return cElseAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//ifcode+=Code*
		public Assignment getIfcodeAssignment_3() { return cIfcodeAssignment_3; }
		
		//Code
		public RuleCall getIfcodeCodeParserRuleCall_3_0() { return cIfcodeCodeParserRuleCall_3_0; }
	}
	public class EndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Endif");
		private final Keyword cEndifKeyword = (Keyword)rule.eContents().get(1);
		
		//Endif:
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'endif'
		public Keyword getEndifKeyword() { return cEndifKeyword; }
	}
	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cEnddoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Do
		//// ---------------------------------------------------
		//Do:
		//	'do' ';'
		//	code+=Code*
		//	'enddo' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' ';' code+=Code* 'enddo' ';'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//code+=Code*
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//Code
		public RuleCall getCodeCodeParserRuleCall_2_0() { return cCodeCodeParserRuleCall_2_0; }
		
		//'enddo'
		public Keyword getEnddoKeyword_3() { return cEnddoKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Dow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDowBooleanParserRuleCall_1_0 = (RuleCall)cDowAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeCodeParserRuleCall_3_0 = (RuleCall)cCodeAssignment_3.eContents().get(0);
		private final Keyword cEnddoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Dow:
		//	'dow' dow=Boolean ';'
		//	code+=Code*
		//	'enddo' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'dow' dow=Boolean ';' code+=Code* 'enddo' ';'
		public Group getGroup() { return cGroup; }
		
		//'dow'
		public Keyword getDowKeyword_0() { return cDowKeyword_0; }
		
		//dow=Boolean
		public Assignment getDowAssignment_1() { return cDowAssignment_1; }
		
		//Boolean
		public RuleCall getDowBooleanParserRuleCall_1_0() { return cDowBooleanParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//code+=Code*
		public Assignment getCodeAssignment_3() { return cCodeAssignment_3; }
		
		//Code
		public RuleCall getCodeCodeParserRuleCall_3_0() { return cCodeCodeParserRuleCall_3_0; }
		
		//'enddo'
		public Keyword getEnddoKeyword_4() { return cEnddoKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DouElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Dou");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDouKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDouAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDouBooleanParserRuleCall_1_0 = (RuleCall)cDouAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeCodeParserRuleCall_3_0 = (RuleCall)cCodeAssignment_3.eContents().get(0);
		private final Keyword cEnddoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Dou:
		//	'dou' dou=Boolean ';'
		//	code+=Code*
		//	'enddo' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'dou' dou=Boolean ';' code+=Code* 'enddo' ';'
		public Group getGroup() { return cGroup; }
		
		//'dou'
		public Keyword getDouKeyword_0() { return cDouKeyword_0; }
		
		//dou=Boolean
		public Assignment getDouAssignment_1() { return cDouAssignment_1; }
		
		//Boolean
		public RuleCall getDouBooleanParserRuleCall_1_0() { return cDouBooleanParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//code+=Code*
		public Assignment getCodeAssignment_3() { return cCodeAssignment_3; }
		
		//Code
		public RuleCall getCodeCodeParserRuleCall_3_0() { return cCodeCodeParserRuleCall_3_0; }
		
		//'enddo'
		public Keyword getEnddoKeyword_4() { return cEnddoKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarDclsCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarDclsIDTerminalRuleCall_1_0_1 = (RuleCall)cVarDclsCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromExpressionParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToExpressionParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCodeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCodeCodeParserRuleCall_7_0 = (RuleCall)cCodeAssignment_7.eContents().get(0);
		private final Keyword cEndforKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//For:
		//	'for' var=[Dcls] '=' from=Expression 'to' to=Expression ';'
		//	code+=Code*
		//	'endfor' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' var=[Dcls] '=' from=Expression 'to' to=Expression ';' code+=Code* 'endfor' ';'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//var=[Dcls]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[Dcls]
		public CrossReference getVarDclsCrossReference_1_0() { return cVarDclsCrossReference_1_0; }
		
		//ID
		public RuleCall getVarDclsIDTerminalRuleCall_1_0_1() { return cVarDclsIDTerminalRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//from=Expression
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Expression
		public RuleCall getFromExpressionParserRuleCall_3_0() { return cFromExpressionParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Expression
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Expression
		public RuleCall getToExpressionParserRuleCall_5_0() { return cToExpressionParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//code+=Code*
		public Assignment getCodeAssignment_7() { return cCodeAssignment_7; }
		
		//Code
		public RuleCall getCodeCodeParserRuleCall_7_0() { return cCodeCodeParserRuleCall_7_0; }
		
		//'endfor'
		public Keyword getEndforKeyword_8() { return cEndforKeyword_8; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class SelectblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Selectblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectblockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSelectParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWhenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhenWhenParserRuleCall_3_0 = (RuleCall)cWhenAssignment_3.eContents().get(0);
		private final Assignment cOtherAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOtherOtherParserRuleCall_4_0 = (RuleCall)cOtherAssignment_4.eContents().get(0);
		private final RuleCall cEndslParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// Select
		//// ---------------------------------------------------
		//Selectblock:
		//	{Selectblock} Select ';' when=When* other=Other? Endsl;
		@Override public ParserRule getRule() { return rule; }
		
		//{Selectblock} Select ';' when=When* other=Other? Endsl
		public Group getGroup() { return cGroup; }
		
		//{Selectblock}
		public Action getSelectblockAction_0() { return cSelectblockAction_0; }
		
		//Select
		public RuleCall getSelectParserRuleCall_1() { return cSelectParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//when=When*
		public Assignment getWhenAssignment_3() { return cWhenAssignment_3; }
		
		//When
		public RuleCall getWhenWhenParserRuleCall_3_0() { return cWhenWhenParserRuleCall_3_0; }
		
		//other=Other?
		public Assignment getOtherAssignment_4() { return cOtherAssignment_4; }
		
		//Other
		public RuleCall getOtherOtherParserRuleCall_4_0() { return cOtherOtherParserRuleCall_4_0; }
		
		//Endsl
		public RuleCall getEndslParserRuleCall_5() { return cEndslParserRuleCall_5; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Select:
		//	'select' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' ';'
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWhencodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhencodeCodeParserRuleCall_3_0 = (RuleCall)cWhencodeAssignment_3.eContents().get(0);
		
		//When:
		//	'when' Boolean ';' whencode+=Code*;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' Boolean ';' whencode+=Code*
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//whencode+=Code*
		public Assignment getWhencodeAssignment_3() { return cWhencodeAssignment_3; }
		
		//Code
		public RuleCall getWhencodeCodeParserRuleCall_3_0() { return cWhencodeCodeParserRuleCall_3_0; }
	}
	public class OtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Other");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOtherAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOtherKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOthercodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOthercodeCodeParserRuleCall_3_0 = (RuleCall)cOthercodeAssignment_3.eContents().get(0);
		
		//Other:
		//	{Other} 'other' ';' othercode+=Code*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Other} 'other' ';' othercode+=Code*
		public Group getGroup() { return cGroup; }
		
		//{Other}
		public Action getOtherAction_0() { return cOtherAction_0; }
		
		//'other'
		public Keyword getOtherKeyword_1() { return cOtherKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//othercode+=Code*
		public Assignment getOthercodeAssignment_3() { return cOthercodeAssignment_3; }
		
		//Code
		public RuleCall getOthercodeCodeParserRuleCall_3_0() { return cOthercodeCodeParserRuleCall_3_0; }
	}
	public class EndslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Endsl");
		private final Keyword cEndslKeyword = (Keyword)rule.eContents().get(1);
		
		//Endsl:
		//	'endsl';
		@Override public ParserRule getRule() { return rule; }
		
		//'endsl'
		public Keyword getEndslKeyword() { return cEndslKeyword; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Return:
		//	{Return} 'return' expression+=Expression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Return} 'return' expression+=Expression?
		public Group getGroup() { return cGroup; }
		
		//{Return}
		public Action getReturnAction_0() { return cReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression+=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBoolexprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolexprsBoolExprParserRuleCall_1_0 = (RuleCall)cBoolexprsAssignment_1.eContents().get(0);
		
		//// Boolean expression:
		//// ---------------------------------------------------------
		//Boolean:
		//	{Boolean} boolexprs+=BoolExpr*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} boolexprs+=BoolExpr*
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//boolexprs+=BoolExpr*
		public Assignment getBoolexprsAssignment_1() { return cBoolexprsAssignment_1; }
		
		//BoolExpr
		public RuleCall getBoolexprsBoolExprParserRuleCall_1_0() { return cBoolexprsBoolExprParserRuleCall_1_0; }
	}
	public class BoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.BoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOrExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BoolExpr:
		//	'not'? OrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//'not'? OrExpr
		public Group getGroup() { return cGroup; }
		
		//'not'?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//OrExpr
		public RuleCall getOrExprParserRuleCall_1() { return cOrExprParserRuleCall_1; }
	}
	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpr BoolExpr:
		//	AndExpr ({Or.left=current} 'or' right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpr ({Or.left=current} 'or' right=AndExpr)*
		public Group getGroup() { return cGroup; }
		
		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }
		
		//({Or.left=current} 'or' right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_2_0() { return cRightAndExprParserRuleCall_1_2_0; }
	}
	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpr BoolExpr:
		//	PrimaryExpr ({And.left=current} 'and' right=PrimaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr ({And.left=current} 'and' right=PrimaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//({And.left=current} 'and' right=PrimaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=PrimaryExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpr
		public RuleCall getRightPrimaryExprParserRuleCall_1_2_0() { return cRightPrimaryExprParserRuleCall_1_2_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBoolExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCompareParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpr BoolExpr:
		//	'(' BoolExpr ')' | Compare;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' BoolExpr ')' | Compare
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' BoolExpr ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//BoolExpr
		public RuleCall getBoolExprParserRuleCall_0_1() { return cBoolExprParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_1() { return cCompareParserRuleCall_1; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSpecAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSpecSpecialParserRuleCall_0_0_0 = (RuleCall)cSpecAssignment_0_0.eContents().get(0);
		private final Assignment cIntval2Assignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIntval2INTTerminalRuleCall_0_1_0 = (RuleCall)cIntval2Assignment_0_1.eContents().get(0);
		private final Assignment cStrval2Assignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cStrval2STRINGTerminalRuleCall_0_2_0 = (RuleCall)cStrval2Assignment_0_2.eContents().get(0);
		private final Assignment cVar2Assignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final CrossReference cVar2DclsCrossReference_0_3_0 = (CrossReference)cVar2Assignment_0_3.eContents().get(0);
		private final RuleCall cVar2DclsIDTerminalRuleCall_0_3_0_1 = (RuleCall)cVar2DclsCrossReference_0_3_0.eContents().get(1);
		private final Assignment cBif2Assignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cBif2BifParserRuleCall_0_4_0 = (RuleCall)cBif2Assignment_0_4.eContents().get(0);
		private final Assignment cCmpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmpCompare2ParserRuleCall_1_0 = (RuleCall)cCmpAssignment_1.eContents().get(0);
		
		//Compare:
		//	(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?;
		@Override public ParserRule getRule() { return rule; }
		
		//(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?
		public Group getGroup() { return cGroup; }
		
		//(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//spec=Special
		public Assignment getSpecAssignment_0_0() { return cSpecAssignment_0_0; }
		
		//Special
		public RuleCall getSpecSpecialParserRuleCall_0_0_0() { return cSpecSpecialParserRuleCall_0_0_0; }
		
		//intval2=INT
		public Assignment getIntval2Assignment_0_1() { return cIntval2Assignment_0_1; }
		
		//INT
		public RuleCall getIntval2INTTerminalRuleCall_0_1_0() { return cIntval2INTTerminalRuleCall_0_1_0; }
		
		//strval2=STRING
		public Assignment getStrval2Assignment_0_2() { return cStrval2Assignment_0_2; }
		
		//STRING
		public RuleCall getStrval2STRINGTerminalRuleCall_0_2_0() { return cStrval2STRINGTerminalRuleCall_0_2_0; }
		
		//var2=[Dcls]
		public Assignment getVar2Assignment_0_3() { return cVar2Assignment_0_3; }
		
		//[Dcls]
		public CrossReference getVar2DclsCrossReference_0_3_0() { return cVar2DclsCrossReference_0_3_0; }
		
		//ID
		public RuleCall getVar2DclsIDTerminalRuleCall_0_3_0_1() { return cVar2DclsIDTerminalRuleCall_0_3_0_1; }
		
		//bif2=Bif
		public Assignment getBif2Assignment_0_4() { return cBif2Assignment_0_4; }
		
		//Bif
		public RuleCall getBif2BifParserRuleCall_0_4_0() { return cBif2BifParserRuleCall_0_4_0; }
		
		//cmp=Compare2?
		public Assignment getCmpAssignment_1() { return cCmpAssignment_1; }
		
		//Compare2
		public RuleCall getCmpCompare2ParserRuleCall_1_0() { return cCmpCompare2ParserRuleCall_1_0; }
	}
	public class Compare2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Compare2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final RuleCall cCompareRightParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Compare2:
		//	('>' | '<' | '=' | '>=' | '<=') CompareRight;
		@Override public ParserRule getRule() { return rule; }
		
		//('>' | '<' | '=' | '>=' | '<=') CompareRight
		public Group getGroup() { return cGroup; }
		
		//('>' | '<' | '=' | '>=' | '<=')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0_3() { return cGreaterThanSignEqualsSignKeyword_0_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0_4() { return cLessThanSignEqualsSignKeyword_0_4; }
		
		//CompareRight
		public RuleCall getCompareRightParserRuleCall_1() { return cCompareRightParserRuleCall_1; }
	}
	public class CompareRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.CompareRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSpecAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSpecSpecialParserRuleCall_0_0_0 = (RuleCall)cSpecAssignment_0_0.eContents().get(0);
		private final Assignment cIntval2Assignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIntval2INTTerminalRuleCall_0_1_0 = (RuleCall)cIntval2Assignment_0_1.eContents().get(0);
		private final Assignment cStrval2Assignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cStrval2STRINGTerminalRuleCall_0_2_0 = (RuleCall)cStrval2Assignment_0_2.eContents().get(0);
		private final Assignment cVar2Assignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final CrossReference cVar2DclsCrossReference_0_3_0 = (CrossReference)cVar2Assignment_0_3.eContents().get(0);
		private final RuleCall cVar2DclsIDTerminalRuleCall_0_3_0_1 = (RuleCall)cVar2DclsCrossReference_0_3_0.eContents().get(1);
		private final Assignment cBif2Assignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cBif2BifParserRuleCall_0_4_0 = (RuleCall)cBif2Assignment_0_4.eContents().get(0);
		private final Assignment cCmpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmpCompare2ParserRuleCall_1_0 = (RuleCall)cCmpAssignment_1.eContents().get(0);
		
		//CompareRight:
		//	(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?;
		@Override public ParserRule getRule() { return rule; }
		
		//(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?
		public Group getGroup() { return cGroup; }
		
		//(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//spec=Special
		public Assignment getSpecAssignment_0_0() { return cSpecAssignment_0_0; }
		
		//Special
		public RuleCall getSpecSpecialParserRuleCall_0_0_0() { return cSpecSpecialParserRuleCall_0_0_0; }
		
		//intval2=INT
		public Assignment getIntval2Assignment_0_1() { return cIntval2Assignment_0_1; }
		
		//INT
		public RuleCall getIntval2INTTerminalRuleCall_0_1_0() { return cIntval2INTTerminalRuleCall_0_1_0; }
		
		//strval2=STRING
		public Assignment getStrval2Assignment_0_2() { return cStrval2Assignment_0_2; }
		
		//STRING
		public RuleCall getStrval2STRINGTerminalRuleCall_0_2_0() { return cStrval2STRINGTerminalRuleCall_0_2_0; }
		
		//var2=[Dcls]
		public Assignment getVar2Assignment_0_3() { return cVar2Assignment_0_3; }
		
		//[Dcls]
		public CrossReference getVar2DclsCrossReference_0_3_0() { return cVar2DclsCrossReference_0_3_0; }
		
		//ID
		public RuleCall getVar2DclsIDTerminalRuleCall_0_3_0_1() { return cVar2DclsIDTerminalRuleCall_0_3_0_1; }
		
		//bif2=Bif
		public Assignment getBif2Assignment_0_4() { return cBif2Assignment_0_4; }
		
		//Bif
		public RuleCall getBif2BifParserRuleCall_0_4_0() { return cBif2BifParserRuleCall_0_4_0; }
		
		//cmp=Compare2?
		public Assignment getCmpAssignment_1() { return cCmpAssignment_1; }
		
		//Compare2
		public RuleCall getCmpCompare2ParserRuleCall_1_0() { return cCmpCompare2ParserRuleCall_1_0; }
	}
	public class SpecialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Special");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cINLRKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cINH1Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOFFKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cZEROSKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cZEROKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBLANKKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBLANKSKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cHIVALKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLOVALKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//Special:
		//	IND | '*INLR' | 'INH1' | '*ON' | '*OFF' | '*ZEROS' | '*ZERO' | '*BLANK' | '*BLANKS' | '*HIVAL' | '*LOVAL';
		@Override public ParserRule getRule() { return rule; }
		
		//IND | '*INLR' | 'INH1' | '*ON' | '*OFF' | '*ZEROS' | '*ZERO' | '*BLANK' | '*BLANKS' | '*HIVAL' | '*LOVAL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IND
		public RuleCall getINDTerminalRuleCall_0() { return cINDTerminalRuleCall_0; }
		
		//'*INLR'
		public Keyword getINLRKeyword_1() { return cINLRKeyword_1; }
		
		//'INH1'
		public Keyword getINH1Keyword_2() { return cINH1Keyword_2; }
		
		//'*ON'
		public Keyword getONKeyword_3() { return cONKeyword_3; }
		
		//'*OFF'
		public Keyword getOFFKeyword_4() { return cOFFKeyword_4; }
		
		//'*ZEROS'
		public Keyword getZEROSKeyword_5() { return cZEROSKeyword_5; }
		
		//'*ZERO'
		public Keyword getZEROKeyword_6() { return cZEROKeyword_6; }
		
		//'*BLANK'
		public Keyword getBLANKKeyword_7() { return cBLANKKeyword_7; }
		
		//'*BLANKS'
		public Keyword getBLANKSKeyword_8() { return cBLANKSKeyword_8; }
		
		//'*HIVAL'
		public Keyword getHIVALKeyword_9() { return cHIVALKeyword_9; }
		
		//'*LOVAL'
		public Keyword getLOVALKeyword_10() { return cLOVALKeyword_10; }
	}
	public class DclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Dcls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDclSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDatatypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatatypeDatatypeParserRuleCall_2_0 = (RuleCall)cDatatypeAssignment_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionsOptionsParserRuleCall_3_0 = (RuleCall)cOptionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* 
		//Bif:
		//	
		//	abs|addr|alloc|bitand|bitnot|bitor|bitxor|char|check|checkr|date|days|dec|dech|decpos|diff|div|editc|editflt|editw|elem|eof|equal|error|fields|float|found|graph|hours|int|inth|kds|len|lookup|minutes|months|mseconds|nullind|occur|open|paddr|paddr|parms|realloc|rem|replace|scan|seconds|shtdn|size|sqrt|status|str|str|str|subdt|this|time|timestamp|tlookup|trim|triml|trimr|ucs2|uns|unsh|xfoot|xlate|years)\b</string>
		//			
		//Opcode:			
		//not|acq|add|adddur|alloc|and|bitoff|biton|cab|call|callb|callp|cas|cat|chain|check|checkr|clear|close|commit|comp|dealloc|define|delete|div|dsply|dump|eval|evalr|except|exfmt|exsr|extrct|feod|force|goto|in|iter|kfld|klist|leave|leavesr|lookup|mhhzo|mhlzo|mlhzo|mllzo|monitor|move|movea|movel|mult|mvr|next|occur|on|open|or|other|out|parm|plist|post|read|readc|reade|readp|readpe|realloc|rel|reset|reset|return|rolbk|scan|setgt|setll|setoff|seton|shtdn|sorta|sqrt|sub|subdur|subst|tag|test|testb|testn|testz|time|unlock|update|write|xfoot|xlate|z-add|z-sub)\b</string>
		//			;
		//
		//*/ Dcls:
		//	'dcl-s' name=ID datatype=Datatype options=Options? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'dcl-s' name=ID datatype=Datatype options=Options? ';'
		public Group getGroup() { return cGroup; }
		
		//'dcl-s'
		public Keyword getDclSKeyword_0() { return cDclSKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//datatype=Datatype
		public Assignment getDatatypeAssignment_2() { return cDatatypeAssignment_2; }
		
		//Datatype
		public RuleCall getDatatypeDatatypeParserRuleCall_2_0() { return cDatatypeDatatypeParserRuleCall_2_0; }
		
		//options=Options?
		public Assignment getOptionsAssignment_3() { return cOptionsAssignment_3; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_3_0() { return cOptionsOptionsParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCharKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVarcharKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cIntKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDecKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cDateKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cTimestampKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Assignment cLenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLenLenParserRuleCall_1_0 = (RuleCall)cLenAssignment_1.eContents().get(0);
		
		//Datatype:
		//	('char' | 'varchar' | 'int' | 'dec' | 'date' | 'timestamp') len=Len?;
		@Override public ParserRule getRule() { return rule; }
		
		//('char' | 'varchar' | 'int' | 'dec' | 'date' | 'timestamp') len=Len?
		public Group getGroup() { return cGroup; }
		
		//('char' | 'varchar' | 'int' | 'dec' | 'date' | 'timestamp')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'char'
		public Keyword getCharKeyword_0_0() { return cCharKeyword_0_0; }
		
		//'varchar'
		public Keyword getVarcharKeyword_0_1() { return cVarcharKeyword_0_1; }
		
		//'int'
		public Keyword getIntKeyword_0_2() { return cIntKeyword_0_2; }
		
		//'dec'
		public Keyword getDecKeyword_0_3() { return cDecKeyword_0_3; }
		
		//'date'
		public Keyword getDateKeyword_0_4() { return cDateKeyword_0_4; }
		
		//'timestamp'
		public Keyword getTimestampKeyword_0_5() { return cTimestampKeyword_0_5; }
		
		//len=Len?
		public Assignment getLenAssignment_1() { return cLenAssignment_1; }
		
		//Len
		public RuleCall getLenLenParserRuleCall_1_0() { return cLenLenParserRuleCall_1_0; }
	}
	public class LenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Len");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Len:
		//	'(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValSTRINGTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Options:
		//	'options' '(' val=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'options' '(' val=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'options'
		public Keyword getOptionsKeyword_0() { return cOptionsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//val=STRING
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_0() { return cValSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final LanguageElements pLanguage;
	private final ComponentsElements pComponents;
	private final CtrloptElements pCtrlopt;
	private final OptElements pOpt;
	private final DirectiveElements pDirective;
	private final DeclareElements pDeclare;
	private final DclfElements pDclf;
	private final FileioElements pFileio;
	private final OpenElements pOpen;
	private final CloseElements pClose;
	private final ChainElements pChain;
	private final ReadElements pRead;
	private final ReadeElements pReade;
	private final SetllElements pSetll;
	private final SetgtElements pSetgt;
	private final EofElements pEof;
	private final RnfElements pRnf;
	private final DclprocElements pDclproc;
	private final CodeElements pCode;
	private final SubrutineElements pSubrutine;
	private final ExsrElements pExsr;
	private final StmtElements pStmt;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final BifElements pBif;
	private final ParmlistElements pParmlist;
	private final Parm1Elements pParm1;
	private final Parm2Elements pParm2;
	private final IfblockElements pIfblock;
	private final IfElements pIf;
	private final ElseifElements pElseif;
	private final ElseElements pElse;
	private final EndifElements pEndif;
	private final DoElements pDo;
	private final DowElements pDow;
	private final DouElements pDou;
	private final ForElements pFor;
	private final SelectblockElements pSelectblock;
	private final SelectElements pSelect;
	private final WhenElements pWhen;
	private final OtherElements pOther;
	private final EndslElements pEndsl;
	private final ReturnElements pReturn;
	private final BooleanElements pBoolean;
	private final BoolExprElements pBoolExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final PrimaryExprElements pPrimaryExpr;
	private final CompareElements pCompare;
	private final Compare2Elements pCompare2;
	private final CompareRightElements pCompareRight;
	private final SpecialElements pSpecial;
	private final TerminalRule tIND;
	private final DclsElements pDcls;
	private final DatatypeElements pDatatype;
	private final LenElements pLen;
	private final OptionsElements pOptions;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RpgleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLanguage = new LanguageElements();
		this.pComponents = new ComponentsElements();
		this.pCtrlopt = new CtrloptElements();
		this.pOpt = new OptElements();
		this.pDirective = new DirectiveElements();
		this.pDeclare = new DeclareElements();
		this.pDclf = new DclfElements();
		this.pFileio = new FileioElements();
		this.pOpen = new OpenElements();
		this.pClose = new CloseElements();
		this.pChain = new ChainElements();
		this.pRead = new ReadElements();
		this.pReade = new ReadeElements();
		this.pSetll = new SetllElements();
		this.pSetgt = new SetgtElements();
		this.pEof = new EofElements();
		this.pRnf = new RnfElements();
		this.pDclproc = new DclprocElements();
		this.pCode = new CodeElements();
		this.pSubrutine = new SubrutineElements();
		this.pExsr = new ExsrElements();
		this.pStmt = new StmtElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pBif = new BifElements();
		this.pParmlist = new ParmlistElements();
		this.pParm1 = new Parm1Elements();
		this.pParm2 = new Parm2Elements();
		this.pIfblock = new IfblockElements();
		this.pIf = new IfElements();
		this.pElseif = new ElseifElements();
		this.pElse = new ElseElements();
		this.pEndif = new EndifElements();
		this.pDo = new DoElements();
		this.pDow = new DowElements();
		this.pDou = new DouElements();
		this.pFor = new ForElements();
		this.pSelectblock = new SelectblockElements();
		this.pSelect = new SelectElements();
		this.pWhen = new WhenElements();
		this.pOther = new OtherElements();
		this.pEndsl = new EndslElements();
		this.pReturn = new ReturnElements();
		this.pBoolean = new BooleanElements();
		this.pBoolExpr = new BoolExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pCompare = new CompareElements();
		this.pCompare2 = new Compare2Elements();
		this.pCompareRight = new CompareRightElements();
		this.pSpecial = new SpecialElements();
		this.tIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.sitemule.rpglanguage.Rpgle.IND");
		this.pDcls = new DclsElements();
		this.pDatatype = new DatatypeElements();
		this.pLen = new LenElements();
		this.pOptions = new OptionsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sitemule.rpglanguage.Rpgle".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Language:
	//	elements+=Components*;
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//Components:
	//	Ctrlopt | Directive | Declare;
	public ComponentsElements getComponentsAccess() {
		return pComponents;
	}
	
	public ParserRule getComponentsRule() {
		return getComponentsAccess().getRule();
	}
	
	//Ctrlopt:
	//	'ctl-opt' opt+=Opt+ ';';
	public CtrloptElements getCtrloptAccess() {
		return pCtrlopt;
	}
	
	public ParserRule getCtrloptRule() {
		return getCtrloptAccess().getRule();
	}
	
	//Opt:
	//	name=ID ('(' value=STRING ')')?;
	public OptElements getOptAccess() {
		return pOpt;
	}
	
	public ParserRule getOptRule() {
		return getOptAccess().getRule();
	}
	
	//Directive:
	//	'/include' name=ID ';';
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//Declare:
	//	Dclproc | Dcls | Dclf;
	public DeclareElements getDeclareAccess() {
		return pDeclare;
	}
	
	public ParserRule getDeclareRule() {
		return getDeclareAccess().getRule();
	}
	
	//// ---------------------- files ------------------------
	//Dclf:
	//	'dcl-f' name=ID ';';
	public DclfElements getDclfAccess() {
		return pDclf;
	}
	
	public ParserRule getDclfRule() {
		return getDclfAccess().getRule();
	}
	
	//Fileio:
	//	Open | Close | Chain | Read | Reade | Setll | Setgt | Eof | Rnf;
	public FileioElements getFileioAccess() {
		return pFileio;
	}
	
	public ParserRule getFileioRule() {
		return getFileioAccess().getRule();
	}
	
	//Open:
	//	'open' name=[Dclf];
	public OpenElements getOpenAccess() {
		return pOpen;
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}
	
	//Close:
	//	'close' name=[Dclf];
	public CloseElements getCloseAccess() {
		return pClose;
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}
	
	//Chain:
	//	'chain' name=[Dclf];
	public ChainElements getChainAccess() {
		return pChain;
	}
	
	public ParserRule getChainRule() {
		return getChainAccess().getRule();
	}
	
	//Read:
	//	'read' name=[Dclf];
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//Reade:
	//	'reade' name=[Dclf];
	public ReadeElements getReadeAccess() {
		return pReade;
	}
	
	public ParserRule getReadeRule() {
		return getReadeAccess().getRule();
	}
	
	//Setll:
	//	'setll' name=[Dclf];
	public SetllElements getSetllAccess() {
		return pSetll;
	}
	
	public ParserRule getSetllRule() {
		return getSetllAccess().getRule();
	}
	
	//Setgt:
	//	'setgt' name=[Dclf];
	public SetgtElements getSetgtAccess() {
		return pSetgt;
	}
	
	public ParserRule getSetgtRule() {
		return getSetgtAccess().getRule();
	}
	
	//Eof:
	//	'%eof' '(' name=[Dclf] ')';
	public EofElements getEofAccess() {
		return pEof;
	}
	
	public ParserRule getEofRule() {
		return getEofAccess().getRule();
	}
	
	//Rnf:
	//	'%rnf' '(' name=[Dclf] ')';
	public RnfElements getRnfAccess() {
		return pRnf;
	}
	
	public ParserRule getRnfRule() {
		return getRnfAccess().getRule();
	}
	
	//// Procedures:
	//// ---------------------------------------------------
	//Dclproc:
	//	'dcl-proc' name=ID ';' declare+=Declare* code+=Code* 'end-proc;';
	public DclprocElements getDclprocAccess() {
		return pDclproc;
	}
	
	public ParserRule getDclprocRule() {
		return getDclprocAccess().getRule();
	}
	
	//Code:
	//	(Stmt | Subrutine) ';';
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//// Subrutine
	//// ---------------------------------------------------
	//Subrutine:
	//	'begsr' name=ID ';' subrcode+=Code* 'endsr';
	public SubrutineElements getSubrutineAccess() {
		return pSubrutine;
	}
	
	public ParserRule getSubrutineRule() {
		return getSubrutineAccess().getRule();
	}
	
	//Exsr:
	//	'exsr' name=[Subrutine];
	public ExsrElements getExsrAccess() {
		return pExsr;
	}
	
	public ParserRule getExsrRule() {
		return getExsrAccess().getRule();
	}
	
	//Stmt:
	//	Assignment | Ifblock | Do | Dow | Dou | For | Selectblock | Exsr | Fileio | Return;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	///*	
	////	Or|If|Do|Dow|Dou|Select|Begsr|Endsr|Endif|Endsl|Enddo|Endfor|When|Exsr|Else|Elseif|Other;
	//*/ Assignment:
	//	variable=[Dcls] '=' expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	intval=INT | strval=STRING | var=[Dcls] | Bif | procval=[Dclproc] '(' parmlist+=Parmlist? ')';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Bif:
	//	Eof | Rnf;
	public BifElements getBifAccess() {
		return pBif;
	}
	
	public ParserRule getBifRule() {
		return getBifAccess().getRule();
	}
	
	//Parmlist:
	//	Parm1 parms+=Parm2*;
	public ParmlistElements getParmlistAccess() {
		return pParmlist;
	}
	
	public ParserRule getParmlistRule() {
		return getParmlistAccess().getRule();
	}
	
	//Parm1:
	//	parm=Expression;
	public Parm1Elements getParm1Access() {
		return pParm1;
	}
	
	public ParserRule getParm1Rule() {
		return getParm1Access().getRule();
	}
	
	//Parm2:
	//	':' Parm1;
	public Parm2Elements getParm2Access() {
		return pParm2;
	}
	
	public ParserRule getParm2Rule() {
		return getParm2Access().getRule();
	}
	
	//// ------------------- IF --------------
	//Ifblock:
	//	If ifcode+=Elseif* ifcode+=Else? Endif;
	public IfblockElements getIfblockAccess() {
		return pIfblock;
	}
	
	public ParserRule getIfblockRule() {
		return getIfblockAccess().getRule();
	}
	
	//If:
	//	'if' Boolean ';'
	//	ifcode+=Code*;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Elseif:
	//	'elseif' Boolean ';'
	//	ifcode+=Code*;
	public ElseifElements getElseifAccess() {
		return pElseif;
	}
	
	public ParserRule getElseifRule() {
		return getElseifAccess().getRule();
	}
	
	//Else:
	//	{Else} 'else' ';'
	//	ifcode+=Code*;
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}
	
	//Endif:
	//	'endif';
	public EndifElements getEndifAccess() {
		return pEndif;
	}
	
	public ParserRule getEndifRule() {
		return getEndifAccess().getRule();
	}
	
	//// Do
	//// ---------------------------------------------------
	//Do:
	//	'do' ';'
	//	code+=Code*
	//	'enddo' ';';
	public DoElements getDoAccess() {
		return pDo;
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}
	
	//Dow:
	//	'dow' dow=Boolean ';'
	//	code+=Code*
	//	'enddo' ';';
	public DowElements getDowAccess() {
		return pDow;
	}
	
	public ParserRule getDowRule() {
		return getDowAccess().getRule();
	}
	
	//Dou:
	//	'dou' dou=Boolean ';'
	//	code+=Code*
	//	'enddo' ';';
	public DouElements getDouAccess() {
		return pDou;
	}
	
	public ParserRule getDouRule() {
		return getDouAccess().getRule();
	}
	
	//For:
	//	'for' var=[Dcls] '=' from=Expression 'to' to=Expression ';'
	//	code+=Code*
	//	'endfor' ';';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//// Select
	//// ---------------------------------------------------
	//Selectblock:
	//	{Selectblock} Select ';' when=When* other=Other? Endsl;
	public SelectblockElements getSelectblockAccess() {
		return pSelectblock;
	}
	
	public ParserRule getSelectblockRule() {
		return getSelectblockAccess().getRule();
	}
	
	//Select:
	//	'select' ';';
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//When:
	//	'when' Boolean ';' whencode+=Code*;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Other:
	//	{Other} 'other' ';' othercode+=Code*;
	public OtherElements getOtherAccess() {
		return pOther;
	}
	
	public ParserRule getOtherRule() {
		return getOtherAccess().getRule();
	}
	
	//Endsl:
	//	'endsl';
	public EndslElements getEndslAccess() {
		return pEndsl;
	}
	
	public ParserRule getEndslRule() {
		return getEndslAccess().getRule();
	}
	
	//Return:
	//	{Return} 'return' expression+=Expression?;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//// Boolean expression:
	//// ---------------------------------------------------------
	//Boolean:
	//	{Boolean} boolexprs+=BoolExpr*;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//BoolExpr:
	//	'not'? OrExpr;
	public BoolExprElements getBoolExprAccess() {
		return pBoolExpr;
	}
	
	public ParserRule getBoolExprRule() {
		return getBoolExprAccess().getRule();
	}
	
	//OrExpr BoolExpr:
	//	AndExpr ({Or.left=current} 'or' right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}
	
	//AndExpr BoolExpr:
	//	PrimaryExpr ({And.left=current} 'and' right=PrimaryExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}
	
	//PrimaryExpr BoolExpr:
	//	'(' BoolExpr ')' | Compare;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//Compare:
	//	(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Compare2:
	//	('>' | '<' | '=' | '>=' | '<=') CompareRight;
	public Compare2Elements getCompare2Access() {
		return pCompare2;
	}
	
	public ParserRule getCompare2Rule() {
		return getCompare2Access().getRule();
	}
	
	//CompareRight:
	//	(spec=Special | intval2=INT | strval2=STRING | var2=[Dcls] | bif2=Bif) cmp=Compare2?;
	public CompareRightElements getCompareRightAccess() {
		return pCompareRight;
	}
	
	public ParserRule getCompareRightRule() {
		return getCompareRightAccess().getRule();
	}
	
	//Special:
	//	IND | '*INLR' | 'INH1' | '*ON' | '*OFF' | '*ZEROS' | '*ZERO' | '*BLANK' | '*BLANKS' | '*HIVAL' | '*LOVAL';
	public SpecialElements getSpecialAccess() {
		return pSpecial;
	}
	
	public ParserRule getSpecialRule() {
		return getSpecialAccess().getRule();
	}
	
	//terminal IND:
	//	'*IN' '0'..'9' '0'..'9';
	public TerminalRule getINDRule() {
		return tIND;
	}
	
	///* 
	//Bif:
	//	
	//	abs|addr|alloc|bitand|bitnot|bitor|bitxor|char|check|checkr|date|days|dec|dech|decpos|diff|div|editc|editflt|editw|elem|eof|equal|error|fields|float|found|graph|hours|int|inth|kds|len|lookup|minutes|months|mseconds|nullind|occur|open|paddr|paddr|parms|realloc|rem|replace|scan|seconds|shtdn|size|sqrt|status|str|str|str|subdt|this|time|timestamp|tlookup|trim|triml|trimr|ucs2|uns|unsh|xfoot|xlate|years)\b</string>
	//			
	//Opcode:			
	//not|acq|add|adddur|alloc|and|bitoff|biton|cab|call|callb|callp|cas|cat|chain|check|checkr|clear|close|commit|comp|dealloc|define|delete|div|dsply|dump|eval|evalr|except|exfmt|exsr|extrct|feod|force|goto|in|iter|kfld|klist|leave|leavesr|lookup|mhhzo|mhlzo|mlhzo|mllzo|monitor|move|movea|movel|mult|mvr|next|occur|on|open|or|other|out|parm|plist|post|read|readc|reade|readp|readpe|realloc|rel|reset|reset|return|rolbk|scan|setgt|setll|setoff|seton|shtdn|sorta|sqrt|sub|subdur|subst|tag|test|testb|testn|testz|time|unlock|update|write|xfoot|xlate|z-add|z-sub)\b</string>
	//			;
	//
	//*/ Dcls:
	//	'dcl-s' name=ID datatype=Datatype options=Options? ';';
	public DclsElements getDclsAccess() {
		return pDcls;
	}
	
	public ParserRule getDclsRule() {
		return getDclsAccess().getRule();
	}
	
	//Datatype:
	//	('char' | 'varchar' | 'int' | 'dec' | 'date' | 'timestamp') len=Len?;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//Len:
	//	'(' INT ')';
	public LenElements getLenAccess() {
		return pLen;
	}
	
	public ParserRule getLenRule() {
		return getLenAccess().getRule();
	}
	
	//Options:
	//	'options' '(' val=STRING ')';
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
