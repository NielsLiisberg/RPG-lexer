/**
 * generated by Xtext 2.19.0
 */
package org.sitemule.rpglanguage.rpgle.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.sitemule.rpglanguage.rpgle.And;
import org.sitemule.rpglanguage.rpgle.Assignment;
import org.sitemule.rpglanguage.rpgle.Bif;
import org.sitemule.rpglanguage.rpgle.BoolExpr;
import org.sitemule.rpglanguage.rpgle.Chain;
import org.sitemule.rpglanguage.rpgle.Close;
import org.sitemule.rpglanguage.rpgle.Code;
import org.sitemule.rpglanguage.rpgle.Compare;
import org.sitemule.rpglanguage.rpgle.Compare2;
import org.sitemule.rpglanguage.rpgle.CompareRight;
import org.sitemule.rpglanguage.rpgle.Components;
import org.sitemule.rpglanguage.rpgle.Ctrlopt;
import org.sitemule.rpglanguage.rpgle.Datatype;
import org.sitemule.rpglanguage.rpgle.Dclf;
import org.sitemule.rpglanguage.rpgle.Dclproc;
import org.sitemule.rpglanguage.rpgle.Dcls;
import org.sitemule.rpglanguage.rpgle.Declare;
import org.sitemule.rpglanguage.rpgle.Directive;
import org.sitemule.rpglanguage.rpgle.Do;
import org.sitemule.rpglanguage.rpgle.Dou;
import org.sitemule.rpglanguage.rpgle.Dow;
import org.sitemule.rpglanguage.rpgle.Else;
import org.sitemule.rpglanguage.rpgle.Elseif;
import org.sitemule.rpglanguage.rpgle.Eof;
import org.sitemule.rpglanguage.rpgle.Expression;
import org.sitemule.rpglanguage.rpgle.Exsr;
import org.sitemule.rpglanguage.rpgle.Fileio;
import org.sitemule.rpglanguage.rpgle.For;
import org.sitemule.rpglanguage.rpgle.If;
import org.sitemule.rpglanguage.rpgle.Ifblock;
import org.sitemule.rpglanguage.rpgle.Language;
import org.sitemule.rpglanguage.rpgle.Open;
import org.sitemule.rpglanguage.rpgle.Opt;
import org.sitemule.rpglanguage.rpgle.Options;
import org.sitemule.rpglanguage.rpgle.Or;
import org.sitemule.rpglanguage.rpgle.Other;
import org.sitemule.rpglanguage.rpgle.Parm1;
import org.sitemule.rpglanguage.rpgle.Parm2;
import org.sitemule.rpglanguage.rpgle.Parmlist;
import org.sitemule.rpglanguage.rpgle.Read;
import org.sitemule.rpglanguage.rpgle.Reade;
import org.sitemule.rpglanguage.rpgle.Return;
import org.sitemule.rpglanguage.rpgle.Rnf;
import org.sitemule.rpglanguage.rpgle.RpgleFactory;
import org.sitemule.rpglanguage.rpgle.RpglePackage;
import org.sitemule.rpglanguage.rpgle.Selectblock;
import org.sitemule.rpglanguage.rpgle.Setgt;
import org.sitemule.rpglanguage.rpgle.Setll;
import org.sitemule.rpglanguage.rpgle.Stmt;
import org.sitemule.rpglanguage.rpgle.Subrutine;
import org.sitemule.rpglanguage.rpgle.When;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RpgleFactoryImpl extends EFactoryImpl implements RpgleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RpgleFactory init()
  {
    try
    {
      RpgleFactory theRpgleFactory = (RpgleFactory)EPackage.Registry.INSTANCE.getEFactory(RpglePackage.eNS_URI);
      if (theRpgleFactory != null)
      {
        return theRpgleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RpgleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RpgleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RpglePackage.LANGUAGE: return createLanguage();
      case RpglePackage.COMPONENTS: return createComponents();
      case RpglePackage.CTRLOPT: return createCtrlopt();
      case RpglePackage.OPT: return createOpt();
      case RpglePackage.DIRECTIVE: return createDirective();
      case RpglePackage.DECLARE: return createDeclare();
      case RpglePackage.DCLF: return createDclf();
      case RpglePackage.FILEIO: return createFileio();
      case RpglePackage.OPEN: return createOpen();
      case RpglePackage.CLOSE: return createClose();
      case RpglePackage.CHAIN: return createChain();
      case RpglePackage.READ: return createRead();
      case RpglePackage.READE: return createReade();
      case RpglePackage.SETLL: return createSetll();
      case RpglePackage.SETGT: return createSetgt();
      case RpglePackage.EOF: return createEof();
      case RpglePackage.RNF: return createRnf();
      case RpglePackage.DCLPROC: return createDclproc();
      case RpglePackage.CODE: return createCode();
      case RpglePackage.SUBRUTINE: return createSubrutine();
      case RpglePackage.EXSR: return createExsr();
      case RpglePackage.STMT: return createStmt();
      case RpglePackage.ASSIGNMENT: return createAssignment();
      case RpglePackage.EXPRESSION: return createExpression();
      case RpglePackage.BIF: return createBif();
      case RpglePackage.PARMLIST: return createParmlist();
      case RpglePackage.PARM1: return createParm1();
      case RpglePackage.PARM2: return createParm2();
      case RpglePackage.IFBLOCK: return createIfblock();
      case RpglePackage.IF: return createIf();
      case RpglePackage.ELSEIF: return createElseif();
      case RpglePackage.ELSE: return createElse();
      case RpglePackage.DO: return createDo();
      case RpglePackage.DOW: return createDow();
      case RpglePackage.DOU: return createDou();
      case RpglePackage.FOR: return createFor();
      case RpglePackage.SELECTBLOCK: return createSelectblock();
      case RpglePackage.WHEN: return createWhen();
      case RpglePackage.OTHER: return createOther();
      case RpglePackage.RETURN: return createReturn();
      case RpglePackage.BOOLEAN: return createBoolean();
      case RpglePackage.BOOL_EXPR: return createBoolExpr();
      case RpglePackage.COMPARE: return createCompare();
      case RpglePackage.COMPARE2: return createCompare2();
      case RpglePackage.COMPARE_RIGHT: return createCompareRight();
      case RpglePackage.DCLS: return createDcls();
      case RpglePackage.DATATYPE: return createDatatype();
      case RpglePackage.OPTIONS: return createOptions();
      case RpglePackage.OR: return createOr();
      case RpglePackage.AND: return createAnd();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Language createLanguage()
  {
    LanguageImpl language = new LanguageImpl();
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Components createComponents()
  {
    ComponentsImpl components = new ComponentsImpl();
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ctrlopt createCtrlopt()
  {
    CtrloptImpl ctrlopt = new CtrloptImpl();
    return ctrlopt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Opt createOpt()
  {
    OptImpl opt = new OptImpl();
    return opt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directive createDirective()
  {
    DirectiveImpl directive = new DirectiveImpl();
    return directive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declare createDeclare()
  {
    DeclareImpl declare = new DeclareImpl();
    return declare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dclf createDclf()
  {
    DclfImpl dclf = new DclfImpl();
    return dclf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fileio createFileio()
  {
    FileioImpl fileio = new FileioImpl();
    return fileio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Open createOpen()
  {
    OpenImpl open = new OpenImpl();
    return open;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Close createClose()
  {
    CloseImpl close = new CloseImpl();
    return close;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Chain createChain()
  {
    ChainImpl chain = new ChainImpl();
    return chain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Read createRead()
  {
    ReadImpl read = new ReadImpl();
    return read;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reade createReade()
  {
    ReadeImpl reade = new ReadeImpl();
    return reade;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Setll createSetll()
  {
    SetllImpl setll = new SetllImpl();
    return setll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Setgt createSetgt()
  {
    SetgtImpl setgt = new SetgtImpl();
    return setgt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Eof createEof()
  {
    EofImpl eof = new EofImpl();
    return eof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rnf createRnf()
  {
    RnfImpl rnf = new RnfImpl();
    return rnf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dclproc createDclproc()
  {
    DclprocImpl dclproc = new DclprocImpl();
    return dclproc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Code createCode()
  {
    CodeImpl code = new CodeImpl();
    return code;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subrutine createSubrutine()
  {
    SubrutineImpl subrutine = new SubrutineImpl();
    return subrutine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exsr createExsr()
  {
    ExsrImpl exsr = new ExsrImpl();
    return exsr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stmt createStmt()
  {
    StmtImpl stmt = new StmtImpl();
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bif createBif()
  {
    BifImpl bif = new BifImpl();
    return bif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parmlist createParmlist()
  {
    ParmlistImpl parmlist = new ParmlistImpl();
    return parmlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parm1 createParm1()
  {
    Parm1Impl parm1 = new Parm1Impl();
    return parm1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parm2 createParm2()
  {
    Parm2Impl parm2 = new Parm2Impl();
    return parm2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ifblock createIfblock()
  {
    IfblockImpl ifblock = new IfblockImpl();
    return ifblock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Elseif createElseif()
  {
    ElseifImpl elseif = new ElseifImpl();
    return elseif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Else createElse()
  {
    ElseImpl else_ = new ElseImpl();
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Do createDo()
  {
    DoImpl do_ = new DoImpl();
    return do_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dow createDow()
  {
    DowImpl dow = new DowImpl();
    return dow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dou createDou()
  {
    DouImpl dou = new DouImpl();
    return dou;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public For createFor()
  {
    ForImpl for_ = new ForImpl();
    return for_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selectblock createSelectblock()
  {
    SelectblockImpl selectblock = new SelectblockImpl();
    return selectblock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public When createWhen()
  {
    WhenImpl when = new WhenImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Other createOther()
  {
    OtherImpl other = new OtherImpl();
    return other;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.sitemule.rpglanguage.rpgle.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolExpr createBoolExpr()
  {
    BoolExprImpl boolExpr = new BoolExprImpl();
    return boolExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compare createCompare()
  {
    CompareImpl compare = new CompareImpl();
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compare2 createCompare2()
  {
    Compare2Impl compare2 = new Compare2Impl();
    return compare2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompareRight createCompareRight()
  {
    CompareRightImpl compareRight = new CompareRightImpl();
    return compareRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dcls createDcls()
  {
    DclsImpl dcls = new DclsImpl();
    return dcls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Datatype createDatatype()
  {
    DatatypeImpl datatype = new DatatypeImpl();
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Options createOptions()
  {
    OptionsImpl options = new OptionsImpl();
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RpglePackage getRpglePackage()
  {
    return (RpglePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RpglePackage getPackage()
  {
    return RpglePackage.eINSTANCE;
  }

} //RpgleFactoryImpl
