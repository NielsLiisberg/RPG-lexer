/**
 * generated by Xtext 2.19.0
 */
package org.sitemule.rpglanguage.rpgle.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.sitemule.rpglanguage.rpgle.And;
import org.sitemule.rpglanguage.rpgle.Assignment;
import org.sitemule.rpglanguage.rpgle.Bif;
import org.sitemule.rpglanguage.rpgle.BoolExpr;
import org.sitemule.rpglanguage.rpgle.Chain;
import org.sitemule.rpglanguage.rpgle.Close;
import org.sitemule.rpglanguage.rpgle.Code;
import org.sitemule.rpglanguage.rpgle.Compare;
import org.sitemule.rpglanguage.rpgle.Compare2;
import org.sitemule.rpglanguage.rpgle.CompareRight;
import org.sitemule.rpglanguage.rpgle.Components;
import org.sitemule.rpglanguage.rpgle.Ctrlopt;
import org.sitemule.rpglanguage.rpgle.Datatype;
import org.sitemule.rpglanguage.rpgle.Dclf;
import org.sitemule.rpglanguage.rpgle.Dclproc;
import org.sitemule.rpglanguage.rpgle.Dcls;
import org.sitemule.rpglanguage.rpgle.Declare;
import org.sitemule.rpglanguage.rpgle.Directive;
import org.sitemule.rpglanguage.rpgle.Do;
import org.sitemule.rpglanguage.rpgle.Dou;
import org.sitemule.rpglanguage.rpgle.Dow;
import org.sitemule.rpglanguage.rpgle.Else;
import org.sitemule.rpglanguage.rpgle.Elseif;
import org.sitemule.rpglanguage.rpgle.Eof;
import org.sitemule.rpglanguage.rpgle.Expression;
import org.sitemule.rpglanguage.rpgle.Exsr;
import org.sitemule.rpglanguage.rpgle.Fileio;
import org.sitemule.rpglanguage.rpgle.For;
import org.sitemule.rpglanguage.rpgle.If;
import org.sitemule.rpglanguage.rpgle.Ifblock;
import org.sitemule.rpglanguage.rpgle.Language;
import org.sitemule.rpglanguage.rpgle.Open;
import org.sitemule.rpglanguage.rpgle.Opt;
import org.sitemule.rpglanguage.rpgle.Options;
import org.sitemule.rpglanguage.rpgle.Or;
import org.sitemule.rpglanguage.rpgle.Other;
import org.sitemule.rpglanguage.rpgle.Parm1;
import org.sitemule.rpglanguage.rpgle.Parm2;
import org.sitemule.rpglanguage.rpgle.Parmlist;
import org.sitemule.rpglanguage.rpgle.Read;
import org.sitemule.rpglanguage.rpgle.Reade;
import org.sitemule.rpglanguage.rpgle.Return;
import org.sitemule.rpglanguage.rpgle.Rnf;
import org.sitemule.rpglanguage.rpgle.RpglePackage;
import org.sitemule.rpglanguage.rpgle.Selectblock;
import org.sitemule.rpglanguage.rpgle.Setgt;
import org.sitemule.rpglanguage.rpgle.Setll;
import org.sitemule.rpglanguage.rpgle.Stmt;
import org.sitemule.rpglanguage.rpgle.Subrutine;
import org.sitemule.rpglanguage.rpgle.When;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.sitemule.rpglanguage.rpgle.RpglePackage
 * @generated
 */
public class RpgleSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RpglePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RpgleSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = RpglePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case RpglePackage.LANGUAGE:
      {
        Language language = (Language)theEObject;
        T result = caseLanguage(language);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.COMPONENTS:
      {
        Components components = (Components)theEObject;
        T result = caseComponents(components);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.CTRLOPT:
      {
        Ctrlopt ctrlopt = (Ctrlopt)theEObject;
        T result = caseCtrlopt(ctrlopt);
        if (result == null) result = caseComponents(ctrlopt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.OPT:
      {
        Opt opt = (Opt)theEObject;
        T result = caseOpt(opt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DIRECTIVE:
      {
        Directive directive = (Directive)theEObject;
        T result = caseDirective(directive);
        if (result == null) result = caseComponents(directive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DECLARE:
      {
        Declare declare = (Declare)theEObject;
        T result = caseDeclare(declare);
        if (result == null) result = caseComponents(declare);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DCLF:
      {
        Dclf dclf = (Dclf)theEObject;
        T result = caseDclf(dclf);
        if (result == null) result = caseDeclare(dclf);
        if (result == null) result = caseComponents(dclf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.FILEIO:
      {
        Fileio fileio = (Fileio)theEObject;
        T result = caseFileio(fileio);
        if (result == null) result = caseStmt(fileio);
        if (result == null) result = caseCode(fileio);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.OPEN:
      {
        Open open = (Open)theEObject;
        T result = caseOpen(open);
        if (result == null) result = caseFileio(open);
        if (result == null) result = caseStmt(open);
        if (result == null) result = caseCode(open);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.CLOSE:
      {
        Close close = (Close)theEObject;
        T result = caseClose(close);
        if (result == null) result = caseFileio(close);
        if (result == null) result = caseStmt(close);
        if (result == null) result = caseCode(close);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.CHAIN:
      {
        Chain chain = (Chain)theEObject;
        T result = caseChain(chain);
        if (result == null) result = caseFileio(chain);
        if (result == null) result = caseStmt(chain);
        if (result == null) result = caseCode(chain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.READ:
      {
        Read read = (Read)theEObject;
        T result = caseRead(read);
        if (result == null) result = caseFileio(read);
        if (result == null) result = caseStmt(read);
        if (result == null) result = caseCode(read);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.READE:
      {
        Reade reade = (Reade)theEObject;
        T result = caseReade(reade);
        if (result == null) result = caseFileio(reade);
        if (result == null) result = caseStmt(reade);
        if (result == null) result = caseCode(reade);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.SETLL:
      {
        Setll setll = (Setll)theEObject;
        T result = caseSetll(setll);
        if (result == null) result = caseFileio(setll);
        if (result == null) result = caseStmt(setll);
        if (result == null) result = caseCode(setll);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.SETGT:
      {
        Setgt setgt = (Setgt)theEObject;
        T result = caseSetgt(setgt);
        if (result == null) result = caseFileio(setgt);
        if (result == null) result = caseStmt(setgt);
        if (result == null) result = caseCode(setgt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.EOF:
      {
        Eof eof = (Eof)theEObject;
        T result = caseEof(eof);
        if (result == null) result = caseFileio(eof);
        if (result == null) result = caseBif(eof);
        if (result == null) result = caseStmt(eof);
        if (result == null) result = caseExpression(eof);
        if (result == null) result = caseCode(eof);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.RNF:
      {
        Rnf rnf = (Rnf)theEObject;
        T result = caseRnf(rnf);
        if (result == null) result = caseFileio(rnf);
        if (result == null) result = caseBif(rnf);
        if (result == null) result = caseStmt(rnf);
        if (result == null) result = caseExpression(rnf);
        if (result == null) result = caseCode(rnf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DCLPROC:
      {
        Dclproc dclproc = (Dclproc)theEObject;
        T result = caseDclproc(dclproc);
        if (result == null) result = caseDeclare(dclproc);
        if (result == null) result = caseComponents(dclproc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.CODE:
      {
        Code code = (Code)theEObject;
        T result = caseCode(code);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.SUBRUTINE:
      {
        Subrutine subrutine = (Subrutine)theEObject;
        T result = caseSubrutine(subrutine);
        if (result == null) result = caseCode(subrutine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.EXSR:
      {
        Exsr exsr = (Exsr)theEObject;
        T result = caseExsr(exsr);
        if (result == null) result = caseStmt(exsr);
        if (result == null) result = caseCode(exsr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.STMT:
      {
        Stmt stmt = (Stmt)theEObject;
        T result = caseStmt(stmt);
        if (result == null) result = caseCode(stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseStmt(assignment);
        if (result == null) result = caseCode(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.BIF:
      {
        Bif bif = (Bif)theEObject;
        T result = caseBif(bif);
        if (result == null) result = caseExpression(bif);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.PARMLIST:
      {
        Parmlist parmlist = (Parmlist)theEObject;
        T result = caseParmlist(parmlist);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.PARM1:
      {
        Parm1 parm1 = (Parm1)theEObject;
        T result = caseParm1(parm1);
        if (result == null) result = caseParmlist(parm1);
        if (result == null) result = caseParm2(parm1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.PARM2:
      {
        Parm2 parm2 = (Parm2)theEObject;
        T result = caseParm2(parm2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.IFBLOCK:
      {
        Ifblock ifblock = (Ifblock)theEObject;
        T result = caseIfblock(ifblock);
        if (result == null) result = caseStmt(ifblock);
        if (result == null) result = caseCode(ifblock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.IF:
      {
        If if_ = (If)theEObject;
        T result = caseIf(if_);
        if (result == null) result = caseIfblock(if_);
        if (result == null) result = caseStmt(if_);
        if (result == null) result = caseCode(if_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.ELSEIF:
      {
        Elseif elseif = (Elseif)theEObject;
        T result = caseElseif(elseif);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.ELSE:
      {
        Else else_ = (Else)theEObject;
        T result = caseElse(else_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DO:
      {
        Do do_ = (Do)theEObject;
        T result = caseDo(do_);
        if (result == null) result = caseStmt(do_);
        if (result == null) result = caseCode(do_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DOW:
      {
        Dow dow = (Dow)theEObject;
        T result = caseDow(dow);
        if (result == null) result = caseStmt(dow);
        if (result == null) result = caseCode(dow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DOU:
      {
        Dou dou = (Dou)theEObject;
        T result = caseDou(dou);
        if (result == null) result = caseStmt(dou);
        if (result == null) result = caseCode(dou);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.FOR:
      {
        For for_ = (For)theEObject;
        T result = caseFor(for_);
        if (result == null) result = caseStmt(for_);
        if (result == null) result = caseCode(for_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.SELECTBLOCK:
      {
        Selectblock selectblock = (Selectblock)theEObject;
        T result = caseSelectblock(selectblock);
        if (result == null) result = caseStmt(selectblock);
        if (result == null) result = caseCode(selectblock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.WHEN:
      {
        When when = (When)theEObject;
        T result = caseWhen(when);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.OTHER:
      {
        Other other = (Other)theEObject;
        T result = caseOther(other);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.RETURN:
      {
        Return return_ = (Return)theEObject;
        T result = caseReturn(return_);
        if (result == null) result = caseStmt(return_);
        if (result == null) result = caseCode(return_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.BOOLEAN:
      {
        org.sitemule.rpglanguage.rpgle.Boolean boolean_ = (org.sitemule.rpglanguage.rpgle.Boolean)theEObject;
        T result = caseBoolean(boolean_);
        if (result == null) result = caseIf(boolean_);
        if (result == null) result = caseElseif(boolean_);
        if (result == null) result = caseWhen(boolean_);
        if (result == null) result = caseIfblock(boolean_);
        if (result == null) result = caseStmt(boolean_);
        if (result == null) result = caseCode(boolean_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.BOOL_EXPR:
      {
        BoolExpr boolExpr = (BoolExpr)theEObject;
        T result = caseBoolExpr(boolExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.COMPARE:
      {
        Compare compare = (Compare)theEObject;
        T result = caseCompare(compare);
        if (result == null) result = caseBoolExpr(compare);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.COMPARE2:
      {
        Compare2 compare2 = (Compare2)theEObject;
        T result = caseCompare2(compare2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.COMPARE_RIGHT:
      {
        CompareRight compareRight = (CompareRight)theEObject;
        T result = caseCompareRight(compareRight);
        if (result == null) result = caseCompare2(compareRight);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DCLS:
      {
        Dcls dcls = (Dcls)theEObject;
        T result = caseDcls(dcls);
        if (result == null) result = caseDeclare(dcls);
        if (result == null) result = caseComponents(dcls);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.DATATYPE:
      {
        Datatype datatype = (Datatype)theEObject;
        T result = caseDatatype(datatype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.OPTIONS:
      {
        Options options = (Options)theEObject;
        T result = caseOptions(options);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseBoolExpr(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RpglePackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseBoolExpr(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Language</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Language</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLanguage(Language object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Components</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Components</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponents(Components object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ctrlopt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ctrlopt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCtrlopt(Ctrlopt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Opt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Opt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpt(Opt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirective(Directive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declare</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declare</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclare(Declare object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dclf</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dclf</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDclf(Dclf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fileio</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fileio</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileio(Fileio object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpen(Open object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Close</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Close</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClose(Close object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChain(Chain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRead(Read object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reade</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reade</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReade(Reade object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Setll</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Setll</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetll(Setll object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Setgt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Setgt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetgt(Setgt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eof</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eof</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEof(Eof object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rnf</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rnf</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRnf(Rnf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dclproc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dclproc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDclproc(Dclproc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCode(Code object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subrutine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subrutine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubrutine(Subrutine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exsr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exsr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExsr(Exsr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStmt(Stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bif</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bif</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBif(Bif object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parmlist</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parmlist</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParmlist(Parmlist object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parm1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parm1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParm1(Parm1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parm2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parm2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParm2(Parm2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ifblock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ifblock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfblock(Ifblock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIf(If object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elseif</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elseif</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseif(Elseif object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElse(Else object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Do</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Do</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDo(Do object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDow(Dow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dou</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dou</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDou(Dou object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFor(For object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selectblock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selectblock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectblock(Selectblock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>When</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>When</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhen(When object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOther(Other object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturn(Return object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolean(org.sitemule.rpglanguage.rpgle.Boolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolExpr(BoolExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompare(Compare object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompare2(Compare2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare Right</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare Right</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareRight(CompareRight object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dcls</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dcls</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDcls(Dcls object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datatype</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datatype</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatatype(Datatype object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptions(Options object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //RpgleSwitch
